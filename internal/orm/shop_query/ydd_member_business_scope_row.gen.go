// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package shop_query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"app/internal/orm/model"
)

func newMemberBusinessScopeRow(db *gorm.DB, opts ...gen.DOOption) memberBusinessScopeRow {
	_memberBusinessScopeRow := memberBusinessScopeRow{}

	_memberBusinessScopeRow.memberBusinessScopeRowDo.UseDB(db, opts...)
	_memberBusinessScopeRow.memberBusinessScopeRowDo.UseModel(&model.MemberBusinessScopeRow{})

	tableName := _memberBusinessScopeRow.memberBusinessScopeRowDo.TableName()
	_memberBusinessScopeRow.ALL = field.NewAsterisk(tableName)
	_memberBusinessScopeRow.ID = field.NewInt32(tableName, "id")
	_memberBusinessScopeRow.Name = field.NewString(tableName, "name")
	_memberBusinessScopeRow.TypeID = field.NewString(tableName, "type_id")

	_memberBusinessScopeRow.fillFieldMap()

	return _memberBusinessScopeRow
}

type memberBusinessScopeRow struct {
	memberBusinessScopeRowDo

	ALL    field.Asterisk
	ID     field.Int32
	Name   field.String
	TypeID field.String

	fieldMap map[string]field.Expr
}

func (m memberBusinessScopeRow) Table(newTableName string) *memberBusinessScopeRow {
	m.memberBusinessScopeRowDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m memberBusinessScopeRow) As(alias string) *memberBusinessScopeRow {
	m.memberBusinessScopeRowDo.DO = *(m.memberBusinessScopeRowDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *memberBusinessScopeRow) updateTableName(table string) *memberBusinessScopeRow {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.Name = field.NewString(table, "name")
	m.TypeID = field.NewString(table, "type_id")

	m.fillFieldMap()

	return m
}

func (m *memberBusinessScopeRow) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *memberBusinessScopeRow) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 3)
	m.fieldMap["id"] = m.ID
	m.fieldMap["name"] = m.Name
	m.fieldMap["type_id"] = m.TypeID
}

func (m memberBusinessScopeRow) clone(db *gorm.DB) memberBusinessScopeRow {
	m.memberBusinessScopeRowDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m memberBusinessScopeRow) replaceDB(db *gorm.DB) memberBusinessScopeRow {
	m.memberBusinessScopeRowDo.ReplaceDB(db)
	return m
}

type memberBusinessScopeRowDo struct{ gen.DO }

type IMemberBusinessScopeRowDo interface {
	gen.SubQuery
	Debug() IMemberBusinessScopeRowDo
	WithContext(ctx context.Context) IMemberBusinessScopeRowDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMemberBusinessScopeRowDo
	WriteDB() IMemberBusinessScopeRowDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMemberBusinessScopeRowDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMemberBusinessScopeRowDo
	Not(conds ...gen.Condition) IMemberBusinessScopeRowDo
	Or(conds ...gen.Condition) IMemberBusinessScopeRowDo
	Select(conds ...field.Expr) IMemberBusinessScopeRowDo
	Where(conds ...gen.Condition) IMemberBusinessScopeRowDo
	Order(conds ...field.Expr) IMemberBusinessScopeRowDo
	Distinct(cols ...field.Expr) IMemberBusinessScopeRowDo
	Omit(cols ...field.Expr) IMemberBusinessScopeRowDo
	Join(table schema.Tabler, on ...field.Expr) IMemberBusinessScopeRowDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMemberBusinessScopeRowDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMemberBusinessScopeRowDo
	Group(cols ...field.Expr) IMemberBusinessScopeRowDo
	Having(conds ...gen.Condition) IMemberBusinessScopeRowDo
	Limit(limit int) IMemberBusinessScopeRowDo
	Offset(offset int) IMemberBusinessScopeRowDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMemberBusinessScopeRowDo
	Unscoped() IMemberBusinessScopeRowDo
	Create(values ...*model.MemberBusinessScopeRow) error
	CreateInBatches(values []*model.MemberBusinessScopeRow, batchSize int) error
	Save(values ...*model.MemberBusinessScopeRow) error
	First() (*model.MemberBusinessScopeRow, error)
	Take() (*model.MemberBusinessScopeRow, error)
	Last() (*model.MemberBusinessScopeRow, error)
	Find() ([]*model.MemberBusinessScopeRow, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MemberBusinessScopeRow, err error)
	FindInBatches(result *[]*model.MemberBusinessScopeRow, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MemberBusinessScopeRow) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMemberBusinessScopeRowDo
	Assign(attrs ...field.AssignExpr) IMemberBusinessScopeRowDo
	Joins(fields ...field.RelationField) IMemberBusinessScopeRowDo
	Preload(fields ...field.RelationField) IMemberBusinessScopeRowDo
	FirstOrInit() (*model.MemberBusinessScopeRow, error)
	FirstOrCreate() (*model.MemberBusinessScopeRow, error)
	FindByPage(offset int, limit int) (result []*model.MemberBusinessScopeRow, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMemberBusinessScopeRowDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m memberBusinessScopeRowDo) Debug() IMemberBusinessScopeRowDo {
	return m.withDO(m.DO.Debug())
}

func (m memberBusinessScopeRowDo) WithContext(ctx context.Context) IMemberBusinessScopeRowDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m memberBusinessScopeRowDo) ReadDB() IMemberBusinessScopeRowDo {
	return m.Clauses(dbresolver.Read)
}

func (m memberBusinessScopeRowDo) WriteDB() IMemberBusinessScopeRowDo {
	return m.Clauses(dbresolver.Write)
}

func (m memberBusinessScopeRowDo) Session(config *gorm.Session) IMemberBusinessScopeRowDo {
	return m.withDO(m.DO.Session(config))
}

func (m memberBusinessScopeRowDo) Clauses(conds ...clause.Expression) IMemberBusinessScopeRowDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m memberBusinessScopeRowDo) Returning(value interface{}, columns ...string) IMemberBusinessScopeRowDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m memberBusinessScopeRowDo) Not(conds ...gen.Condition) IMemberBusinessScopeRowDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m memberBusinessScopeRowDo) Or(conds ...gen.Condition) IMemberBusinessScopeRowDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m memberBusinessScopeRowDo) Select(conds ...field.Expr) IMemberBusinessScopeRowDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m memberBusinessScopeRowDo) Where(conds ...gen.Condition) IMemberBusinessScopeRowDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m memberBusinessScopeRowDo) Order(conds ...field.Expr) IMemberBusinessScopeRowDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m memberBusinessScopeRowDo) Distinct(cols ...field.Expr) IMemberBusinessScopeRowDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m memberBusinessScopeRowDo) Omit(cols ...field.Expr) IMemberBusinessScopeRowDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m memberBusinessScopeRowDo) Join(table schema.Tabler, on ...field.Expr) IMemberBusinessScopeRowDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m memberBusinessScopeRowDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMemberBusinessScopeRowDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m memberBusinessScopeRowDo) RightJoin(table schema.Tabler, on ...field.Expr) IMemberBusinessScopeRowDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m memberBusinessScopeRowDo) Group(cols ...field.Expr) IMemberBusinessScopeRowDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m memberBusinessScopeRowDo) Having(conds ...gen.Condition) IMemberBusinessScopeRowDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m memberBusinessScopeRowDo) Limit(limit int) IMemberBusinessScopeRowDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m memberBusinessScopeRowDo) Offset(offset int) IMemberBusinessScopeRowDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m memberBusinessScopeRowDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMemberBusinessScopeRowDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m memberBusinessScopeRowDo) Unscoped() IMemberBusinessScopeRowDo {
	return m.withDO(m.DO.Unscoped())
}

func (m memberBusinessScopeRowDo) Create(values ...*model.MemberBusinessScopeRow) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m memberBusinessScopeRowDo) CreateInBatches(values []*model.MemberBusinessScopeRow, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m memberBusinessScopeRowDo) Save(values ...*model.MemberBusinessScopeRow) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m memberBusinessScopeRowDo) First() (*model.MemberBusinessScopeRow, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberBusinessScopeRow), nil
	}
}

func (m memberBusinessScopeRowDo) Take() (*model.MemberBusinessScopeRow, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberBusinessScopeRow), nil
	}
}

func (m memberBusinessScopeRowDo) Last() (*model.MemberBusinessScopeRow, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberBusinessScopeRow), nil
	}
}

func (m memberBusinessScopeRowDo) Find() ([]*model.MemberBusinessScopeRow, error) {
	result, err := m.DO.Find()
	return result.([]*model.MemberBusinessScopeRow), err
}

func (m memberBusinessScopeRowDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MemberBusinessScopeRow, err error) {
	buf := make([]*model.MemberBusinessScopeRow, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m memberBusinessScopeRowDo) FindInBatches(result *[]*model.MemberBusinessScopeRow, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m memberBusinessScopeRowDo) Attrs(attrs ...field.AssignExpr) IMemberBusinessScopeRowDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m memberBusinessScopeRowDo) Assign(attrs ...field.AssignExpr) IMemberBusinessScopeRowDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m memberBusinessScopeRowDo) Joins(fields ...field.RelationField) IMemberBusinessScopeRowDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m memberBusinessScopeRowDo) Preload(fields ...field.RelationField) IMemberBusinessScopeRowDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m memberBusinessScopeRowDo) FirstOrInit() (*model.MemberBusinessScopeRow, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberBusinessScopeRow), nil
	}
}

func (m memberBusinessScopeRowDo) FirstOrCreate() (*model.MemberBusinessScopeRow, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberBusinessScopeRow), nil
	}
}

func (m memberBusinessScopeRowDo) FindByPage(offset int, limit int) (result []*model.MemberBusinessScopeRow, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m memberBusinessScopeRowDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m memberBusinessScopeRowDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m memberBusinessScopeRowDo) Delete(models ...*model.MemberBusinessScopeRow) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *memberBusinessScopeRowDo) withDO(do gen.Dao) *memberBusinessScopeRowDo {
	m.DO = *do.(*gen.DO)
	return m
}
