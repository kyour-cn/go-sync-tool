// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package shop_query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"app/internal/orm/shop_model"
)

func newOrder(db *gorm.DB, opts ...gen.DOOption) order {
	_order := order{}

	_order.orderDo.UseDB(db, opts...)
	_order.orderDo.UseModel(&shop_model.Order{})

	tableName := _order.orderDo.TableName()
	_order.ALL = field.NewAsterisk(tableName)
	_order.OrderID = field.NewInt32(tableName, "order_id")
	_order.OrderNo = field.NewString(tableName, "order_no")
	_order.SiteID = field.NewInt32(tableName, "site_id")
	_order.SiteName = field.NewString(tableName, "site_name")
	_order.WebsiteID = field.NewInt32(tableName, "website_id")
	_order.OrderName = field.NewString(tableName, "order_name")
	_order.OrderFrom = field.NewString(tableName, "order_from")
	_order.OrderFromName = field.NewString(tableName, "order_from_name")
	_order.OrderType = field.NewInt32(tableName, "order_type")
	_order.OrderTypeName = field.NewString(tableName, "order_type_name")
	_order.OrderPromotionType = field.NewInt32(tableName, "order_promotion_type")
	_order.OrderPromotionName = field.NewString(tableName, "order_promotion_name")
	_order.PromotionID = field.NewInt32(tableName, "promotion_id")
	_order.OutTradeNo = field.NewString(tableName, "out_trade_no")
	_order.OutTradeNo2 = field.NewString(tableName, "out_trade_no_2")
	_order.DeliveryCode = field.NewString(tableName, "delivery_code")
	_order.OrderStatus = field.NewInt32(tableName, "order_status")
	_order.OrderStatusName = field.NewString(tableName, "order_status_name")
	_order.OrderStatusAction = field.NewString(tableName, "order_status_action")
	_order.PayStatus = field.NewInt32(tableName, "pay_status")
	_order.DeliveryStatus = field.NewInt32(tableName, "delivery_status")
	_order.RefundStatus = field.NewInt32(tableName, "refund_status")
	_order.PayType = field.NewString(tableName, "pay_type")
	_order.PayTypeName = field.NewString(tableName, "pay_type_name")
	_order.DeliveryType = field.NewString(tableName, "delivery_type")
	_order.DeliveryTypeName = field.NewString(tableName, "delivery_type_name")
	_order.MemberID = field.NewInt32(tableName, "member_id")
	_order.Name = field.NewString(tableName, "name")
	_order.Mobile = field.NewString(tableName, "mobile")
	_order.Telephone = field.NewString(tableName, "telephone")
	_order.ProvinceID = field.NewInt32(tableName, "province_id")
	_order.CityID = field.NewInt32(tableName, "city_id")
	_order.DistrictID = field.NewInt32(tableName, "district_id")
	_order.CommunityID = field.NewInt32(tableName, "community_id")
	_order.Address = field.NewString(tableName, "address")
	_order.FullAddress = field.NewString(tableName, "full_address")
	_order.Longitude = field.NewString(tableName, "longitude")
	_order.Latitude = field.NewString(tableName, "latitude")
	_order.BuyerIP = field.NewString(tableName, "buyer_ip")
	_order.BuyerAskDeliveryTime = field.NewInt32(tableName, "buyer_ask_delivery_time")
	_order.BuyerMessage = field.NewString(tableName, "buyer_message")
	_order.GoodsMoney = field.NewFloat64(tableName, "goods_money")
	_order.DeliveryMoney = field.NewFloat64(tableName, "delivery_money")
	_order.PromotionMoney = field.NewFloat64(tableName, "promotion_money")
	_order.CouponID = field.NewInt32(tableName, "coupon_id")
	_order.CouponMoney = field.NewFloat64(tableName, "coupon_money")
	_order.InvoiceMoney = field.NewFloat64(tableName, "invoice_money")
	_order.OrderMoney = field.NewFloat64(tableName, "order_money")
	_order.AdjustMoney = field.NewFloat64(tableName, "adjust_money")
	_order.BalanceMoney = field.NewFloat64(tableName, "balance_money")
	_order.PayMoney = field.NewFloat64(tableName, "pay_money")
	_order.CreateTime = field.NewUint(tableName, "create_time")
	_order.PayTime = field.NewInt32(tableName, "pay_time")
	_order.DeliveryTime = field.NewInt32(tableName, "delivery_time")
	_order.SignTime = field.NewInt32(tableName, "sign_time")
	_order.FinishTime = field.NewInt32(tableName, "finish_time")
	_order.CloseTime = field.NewInt32(tableName, "close_time")
	_order.IsLock = field.NewInt32(tableName, "is_lock")
	_order.IsEvaluate = field.NewInt32(tableName, "is_evaluate")
	_order.IsDelete = field.NewInt32(tableName, "is_delete")
	_order.IsEnableRefund = field.NewInt32(tableName, "is_enable_refund")
	_order.Remark = field.NewString(tableName, "remark")
	_order.GoodsNum = field.NewInt32(tableName, "goods_num")
	_order.DeliveryStoreID = field.NewInt32(tableName, "delivery_store_id")
	_order.DeliveryStatusName = field.NewString(tableName, "delivery_status_name")
	_order.IsSettlement = field.NewBool(tableName, "is_settlement")
	_order.StoreSettlementID = field.NewInt32(tableName, "store_settlement_id")
	_order.DeliveryStoreName = field.NewString(tableName, "delivery_store_name")
	_order.PromotionType = field.NewString(tableName, "promotion_type")
	_order.PromotionTypeName = field.NewString(tableName, "promotion_type_name")
	_order.PromotionStatusName = field.NewString(tableName, "promotion_status_name")
	_order.DeliveryStoreInfo = field.NewString(tableName, "delivery_store_info")
	_order.VirtualCode = field.NewString(tableName, "virtual_code")
	_order.EvaluateStatus = field.NewInt32(tableName, "evaluate_status")
	_order.EvaluateStatusName = field.NewString(tableName, "evaluate_status_name")
	_order.RefundMoney = field.NewFloat64(tableName, "refund_money")
	_order.Commission = field.NewFloat64(tableName, "commission")
	_order.IsInvoice = field.NewInt32(tableName, "is_invoice")
	_order.InvoiceType = field.NewInt32(tableName, "invoice_type")
	_order.InvoiceTitle = field.NewString(tableName, "invoice_title")
	_order.TaxpayerNumber = field.NewString(tableName, "taxpayer_number")
	_order.InvoiceRate = field.NewFloat64(tableName, "invoice_rate")
	_order.InvoiceContent = field.NewString(tableName, "invoice_content")
	_order.InvoiceDeliveryMoney = field.NewFloat64(tableName, "invoice_delivery_money")
	_order.InvoiceFullAddress = field.NewString(tableName, "invoice_full_address")
	_order.IsTaxInvoice = field.NewInt32(tableName, "is_tax_invoice")
	_order.InvoiceEmail = field.NewString(tableName, "invoice_email")
	_order.InvoiceTitleType = field.NewInt32(tableName, "invoice_title_type")
	_order.IsFenxiao = field.NewInt32(tableName, "is_fenxiao")
	_order.PointMoney = field.NewFloat64(tableName, "point_money")
	_order.MemberCardMoney = field.NewFloat64(tableName, "member_card_money")
	_order.MemberCardOrder = field.NewInt32(tableName, "member_card_order")
	_order.InvoiceStatus = field.NewBool(tableName, "invoice_status")
	_order.InvoiceRemark = field.NewString(tableName, "invoice_remark")
	_order.InvoiceCode = field.NewString(tableName, "invoice_code")
	_order.InvoiceImage = field.NewString(tableName, "invoice_image")
	_order.InvoiceTime = field.NewInt32(tableName, "invoice_time")
	_order.PredictDeliveryTime = field.NewInt32(tableName, "predict_delivery_time")
	_order.IsVideoNumber = field.NewInt32(tableName, "is_video_number")
	_order.SyncTime = field.NewInt32(tableName, "sync_time")
	_order.IsGetfreeOrder = field.NewInt32(tableName, "is_getfree_order")
	_order.IsDiscountOrder = field.NewInt32(tableName, "is_discount_order")
	_order.IsChineseMedicine = field.NewInt32(tableName, "is_chinese_medicine")
	_order.IsSaleControl = field.NewInt32(tableName, "is_sale_control")
	_order.FenxiaoMemberID = field.NewInt32(tableName, "fenxiao_member_id")
	_order.SettleTypeID = field.NewInt32(tableName, "settle_type_id")
	_order.DiscountMoney = field.NewFloat64(tableName, "discount_money")
	_order.AgentPayOpenid = field.NewString(tableName, "agent_pay_openid")
	_order.ReceiptType = field.NewInt32(tableName, "receipt_type")
	_order.Employeename = field.NewString(tableName, "employeename")
	_order.Employeecode = field.NewString(tableName, "employeecode")
	_order.SalesmanMemberID = field.NewInt32(tableName, "salesman_member_id")
	_order.VoucherImg = field.NewString(tableName, "voucher_img")
	_order.OrderGoods = orderHasManyOrderGoods{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("OrderGoods", "shop_model.OrderGoods"),
		Goods: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("OrderGoods.Goods", "shop_model.Goods"),
		},
	}

	_order.StaffSalesman = orderHasOneStaffSalesman{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("StaffSalesman", "shop_model.StaffSalesman"),
	}

	_order.SettlementType = orderHasOneSettlementType{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("SettlementType", "shop_model.OrderSettlementType"),
	}

	_order.Member = orderHasOneMember{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Member", "shop_model.Member"),
	}

	_order.fillFieldMap()

	return _order
}

// order 订单表
type order struct {
	orderDo

	ALL                  field.Asterisk
	OrderID              field.Int32
	OrderNo              field.String  // 订单编号
	SiteID               field.Int32   // 商家id
	SiteName             field.String  // 店铺名称
	WebsiteID            field.Int32   // 分站id
	OrderName            field.String  // 订单内容
	OrderFrom            field.String  // 订单来源
	OrderFromName        field.String  // 订单来源名称
	OrderType            field.Int32   // 订单类型 1. 普通订单  2. 门店订单  3. 本地配送订单4. 虚拟订单
	OrderTypeName        field.String  // 订单类型名称
	OrderPromotionType   field.Int32   // 订单营销类型
	OrderPromotionName   field.String  // 营销活动类型名称
	PromotionID          field.Int32   // 营销活动id
	OutTradeNo           field.String  // 支付流水号
	OutTradeNo2          field.String  // 支付流水号（多次支付）
	DeliveryCode         field.String  // 整体提货编码
	OrderStatus          field.Int32   // 订单状态 0：待支付；1待发货；3已发货；4已收货；10已完成；-1已关闭  refunding：退款中
	OrderStatusName      field.String  // 订单状态名称
	OrderStatusAction    field.String  // 订单操作
	PayStatus            field.Int32   // 支付状态
	DeliveryStatus       field.Int32   // 配送状态
	RefundStatus         field.Int32   // 退款状态
	PayType              field.String  // 支付方式
	PayTypeName          field.String  // 支付类型名称
	DeliveryType         field.String  // 配送方式
	DeliveryTypeName     field.String  // 配送方式名称
	MemberID             field.Int32   // 购买人uid
	Name                 field.String  // 购买人姓名
	Mobile               field.String  // 购买人手机
	Telephone            field.String  // 购买人固定电话
	ProvinceID           field.Int32   // 购买人省id
	CityID               field.Int32   // 购买人市id
	DistrictID           field.Int32   // 购买人区县id
	CommunityID          field.Int32   // 购买人社区id
	Address              field.String  // 购买人地址
	FullAddress          field.String  // 购买人详细地址
	Longitude            field.String  // 购买人地址经度
	Latitude             field.String  // 购买人地址纬度
	BuyerIP              field.String  // 购买人ip
	BuyerAskDeliveryTime field.Int32   // 购买人要求配送时间
	BuyerMessage         field.String  // 购买人留言信息
	GoodsMoney           field.Float64 // 商品总金额
	DeliveryMoney        field.Float64 // 配送费用
	PromotionMoney       field.Float64 // 订单优惠金额（满减）
	CouponID             field.Int32   // 优惠券id
	CouponMoney          field.Float64 // 优惠券金额
	InvoiceMoney         field.Float64 // 发票金额
	OrderMoney           field.Float64 // 订单合计金额
	AdjustMoney          field.Float64 // 订单调整金额
	BalanceMoney         field.Float64 // 余额支付金额
	PayMoney             field.Float64 // 抵扣之后应付金额
	CreateTime           field.Uint    // 创建时间
	PayTime              field.Int32   // 订单支付时间
	DeliveryTime         field.Int32   // 订单配送时间
	SignTime             field.Int32   // 订单签收时间
	FinishTime           field.Int32   // 订单完成时间
	CloseTime            field.Int32   // 订单关闭时间
	IsLock               field.Int32   // 是否锁定订单（针对维权，锁定不可操作）
	IsEvaluate           field.Int32   // 是否允许订单评价
	IsDelete             field.Int32   // 是否删除(针对后台)
	IsEnableRefund       field.Int32   // 是否允许退款
	Remark               field.String  // 卖家留言
	GoodsNum             field.Int32   // 商品件数
	DeliveryStoreID      field.Int32   // 门店id
	DeliveryStatusName   field.String  // 发货状态
	IsSettlement         field.Bool    // 是否进行结算
	StoreSettlementID    field.Int32   // 门店结算id
	DeliveryStoreName    field.String  // 门店名称
	PromotionType        field.String  // 营销类型
	PromotionTypeName    field.String  // 营销类型名称
	PromotionStatusName  field.String  // 营销状态名称
	DeliveryStoreInfo    field.String  // 门店信息(json)
	VirtualCode          field.String  // 虚拟商品码
	EvaluateStatus       field.Int32   // 评价状态，0：未评价，1：已评价，2：已追评
	EvaluateStatusName   field.String  // 评价状态名称，未评价，已评价，已追评
	RefundMoney          field.Float64 // 订单退款金额
	Commission           field.Float64 // 总支出佣金
	IsInvoice            field.Int32   // 是否需要发票 0 无发票  1 有发票
	InvoiceType          field.Int32   // 发票类型  1 纸质发票 2 电子发票
	InvoiceTitle         field.String  // 发票抬头
	TaxpayerNumber       field.String  // 纳税人识别号
	InvoiceRate          field.Float64 // 发票税率
	InvoiceContent       field.String  // 发票内容
	InvoiceDeliveryMoney field.Float64 // 发票邮寄费用
	InvoiceFullAddress   field.String  // 发票邮寄地址
	IsTaxInvoice         field.Int32   // 是否需要增值税专用发票
	InvoiceEmail         field.String  // 发票发送邮件
	InvoiceTitleType     field.Int32   // 发票抬头类型  1 个人  2 企业
	IsFenxiao            field.Int32   // 是否参与分销 0不参与 1参与
	PointMoney           field.Float64 // 积分抵现金额
	MemberCardMoney      field.Float64 // 会员卡订单金额
	MemberCardOrder      field.Int32   // 会员卡订单id
	InvoiceStatus        field.Bool    // 发票状态（0待开票   1已开票）
	InvoiceRemark        field.String  // 发票备注
	InvoiceCode          field.String  // 发票编码
	InvoiceImage         field.String  // 发票凭证
	InvoiceTime          field.Int32   // 开票时间
	PredictDeliveryTime  field.Int32   // 预计发货时间
	IsVideoNumber        field.Int32   // 订单是否同步到视频号
	SyncTime             field.Int32   // 同步到ERP时间
	IsGetfreeOrder       field.Int32   // 是否存在换购商品 0 不存在换购，1存在换购商品
	IsDiscountOrder      field.Int32   // 是否存在特价商品 0 不存在特价，1存在特价商品
	IsChineseMedicine    field.Int32   // 是否是中药商品 0 不是 1是
	IsSaleControl        field.Int32   // 是否是控销订单
	FenxiaoMemberID      field.Int32   // 代客下单业务员id，非代客下单为0
	SettleTypeID         field.Int32   // 结算类型ID
	DiscountMoney        field.Float64 // 折扣、秒杀优惠金额
	AgentPayOpenid       field.String  // 代支付人微信openid
	ReceiptType          field.Int32   // 1 无 2 普票 3 专票
	Employeename         field.String  // 开票人
	Employeecode         field.String  // 开票人code
	SalesmanMemberID     field.Int32   // 代客下单业务员id，非代客下单为0（新）
	VoucherImg           field.String  // 凭证
	OrderGoods           orderHasManyOrderGoods

	StaffSalesman orderHasOneStaffSalesman

	SettlementType orderHasOneSettlementType

	Member orderHasOneMember

	fieldMap map[string]field.Expr
}

func (o order) Table(newTableName string) *order {
	o.orderDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o order) As(alias string) *order {
	o.orderDo.DO = *(o.orderDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *order) updateTableName(table string) *order {
	o.ALL = field.NewAsterisk(table)
	o.OrderID = field.NewInt32(table, "order_id")
	o.OrderNo = field.NewString(table, "order_no")
	o.SiteID = field.NewInt32(table, "site_id")
	o.SiteName = field.NewString(table, "site_name")
	o.WebsiteID = field.NewInt32(table, "website_id")
	o.OrderName = field.NewString(table, "order_name")
	o.OrderFrom = field.NewString(table, "order_from")
	o.OrderFromName = field.NewString(table, "order_from_name")
	o.OrderType = field.NewInt32(table, "order_type")
	o.OrderTypeName = field.NewString(table, "order_type_name")
	o.OrderPromotionType = field.NewInt32(table, "order_promotion_type")
	o.OrderPromotionName = field.NewString(table, "order_promotion_name")
	o.PromotionID = field.NewInt32(table, "promotion_id")
	o.OutTradeNo = field.NewString(table, "out_trade_no")
	o.OutTradeNo2 = field.NewString(table, "out_trade_no_2")
	o.DeliveryCode = field.NewString(table, "delivery_code")
	o.OrderStatus = field.NewInt32(table, "order_status")
	o.OrderStatusName = field.NewString(table, "order_status_name")
	o.OrderStatusAction = field.NewString(table, "order_status_action")
	o.PayStatus = field.NewInt32(table, "pay_status")
	o.DeliveryStatus = field.NewInt32(table, "delivery_status")
	o.RefundStatus = field.NewInt32(table, "refund_status")
	o.PayType = field.NewString(table, "pay_type")
	o.PayTypeName = field.NewString(table, "pay_type_name")
	o.DeliveryType = field.NewString(table, "delivery_type")
	o.DeliveryTypeName = field.NewString(table, "delivery_type_name")
	o.MemberID = field.NewInt32(table, "member_id")
	o.Name = field.NewString(table, "name")
	o.Mobile = field.NewString(table, "mobile")
	o.Telephone = field.NewString(table, "telephone")
	o.ProvinceID = field.NewInt32(table, "province_id")
	o.CityID = field.NewInt32(table, "city_id")
	o.DistrictID = field.NewInt32(table, "district_id")
	o.CommunityID = field.NewInt32(table, "community_id")
	o.Address = field.NewString(table, "address")
	o.FullAddress = field.NewString(table, "full_address")
	o.Longitude = field.NewString(table, "longitude")
	o.Latitude = field.NewString(table, "latitude")
	o.BuyerIP = field.NewString(table, "buyer_ip")
	o.BuyerAskDeliveryTime = field.NewInt32(table, "buyer_ask_delivery_time")
	o.BuyerMessage = field.NewString(table, "buyer_message")
	o.GoodsMoney = field.NewFloat64(table, "goods_money")
	o.DeliveryMoney = field.NewFloat64(table, "delivery_money")
	o.PromotionMoney = field.NewFloat64(table, "promotion_money")
	o.CouponID = field.NewInt32(table, "coupon_id")
	o.CouponMoney = field.NewFloat64(table, "coupon_money")
	o.InvoiceMoney = field.NewFloat64(table, "invoice_money")
	o.OrderMoney = field.NewFloat64(table, "order_money")
	o.AdjustMoney = field.NewFloat64(table, "adjust_money")
	o.BalanceMoney = field.NewFloat64(table, "balance_money")
	o.PayMoney = field.NewFloat64(table, "pay_money")
	o.CreateTime = field.NewUint(table, "create_time")
	o.PayTime = field.NewInt32(table, "pay_time")
	o.DeliveryTime = field.NewInt32(table, "delivery_time")
	o.SignTime = field.NewInt32(table, "sign_time")
	o.FinishTime = field.NewInt32(table, "finish_time")
	o.CloseTime = field.NewInt32(table, "close_time")
	o.IsLock = field.NewInt32(table, "is_lock")
	o.IsEvaluate = field.NewInt32(table, "is_evaluate")
	o.IsDelete = field.NewInt32(table, "is_delete")
	o.IsEnableRefund = field.NewInt32(table, "is_enable_refund")
	o.Remark = field.NewString(table, "remark")
	o.GoodsNum = field.NewInt32(table, "goods_num")
	o.DeliveryStoreID = field.NewInt32(table, "delivery_store_id")
	o.DeliveryStatusName = field.NewString(table, "delivery_status_name")
	o.IsSettlement = field.NewBool(table, "is_settlement")
	o.StoreSettlementID = field.NewInt32(table, "store_settlement_id")
	o.DeliveryStoreName = field.NewString(table, "delivery_store_name")
	o.PromotionType = field.NewString(table, "promotion_type")
	o.PromotionTypeName = field.NewString(table, "promotion_type_name")
	o.PromotionStatusName = field.NewString(table, "promotion_status_name")
	o.DeliveryStoreInfo = field.NewString(table, "delivery_store_info")
	o.VirtualCode = field.NewString(table, "virtual_code")
	o.EvaluateStatus = field.NewInt32(table, "evaluate_status")
	o.EvaluateStatusName = field.NewString(table, "evaluate_status_name")
	o.RefundMoney = field.NewFloat64(table, "refund_money")
	o.Commission = field.NewFloat64(table, "commission")
	o.IsInvoice = field.NewInt32(table, "is_invoice")
	o.InvoiceType = field.NewInt32(table, "invoice_type")
	o.InvoiceTitle = field.NewString(table, "invoice_title")
	o.TaxpayerNumber = field.NewString(table, "taxpayer_number")
	o.InvoiceRate = field.NewFloat64(table, "invoice_rate")
	o.InvoiceContent = field.NewString(table, "invoice_content")
	o.InvoiceDeliveryMoney = field.NewFloat64(table, "invoice_delivery_money")
	o.InvoiceFullAddress = field.NewString(table, "invoice_full_address")
	o.IsTaxInvoice = field.NewInt32(table, "is_tax_invoice")
	o.InvoiceEmail = field.NewString(table, "invoice_email")
	o.InvoiceTitleType = field.NewInt32(table, "invoice_title_type")
	o.IsFenxiao = field.NewInt32(table, "is_fenxiao")
	o.PointMoney = field.NewFloat64(table, "point_money")
	o.MemberCardMoney = field.NewFloat64(table, "member_card_money")
	o.MemberCardOrder = field.NewInt32(table, "member_card_order")
	o.InvoiceStatus = field.NewBool(table, "invoice_status")
	o.InvoiceRemark = field.NewString(table, "invoice_remark")
	o.InvoiceCode = field.NewString(table, "invoice_code")
	o.InvoiceImage = field.NewString(table, "invoice_image")
	o.InvoiceTime = field.NewInt32(table, "invoice_time")
	o.PredictDeliveryTime = field.NewInt32(table, "predict_delivery_time")
	o.IsVideoNumber = field.NewInt32(table, "is_video_number")
	o.SyncTime = field.NewInt32(table, "sync_time")
	o.IsGetfreeOrder = field.NewInt32(table, "is_getfree_order")
	o.IsDiscountOrder = field.NewInt32(table, "is_discount_order")
	o.IsChineseMedicine = field.NewInt32(table, "is_chinese_medicine")
	o.IsSaleControl = field.NewInt32(table, "is_sale_control")
	o.FenxiaoMemberID = field.NewInt32(table, "fenxiao_member_id")
	o.SettleTypeID = field.NewInt32(table, "settle_type_id")
	o.DiscountMoney = field.NewFloat64(table, "discount_money")
	o.AgentPayOpenid = field.NewString(table, "agent_pay_openid")
	o.ReceiptType = field.NewInt32(table, "receipt_type")
	o.Employeename = field.NewString(table, "employeename")
	o.Employeecode = field.NewString(table, "employeecode")
	o.SalesmanMemberID = field.NewInt32(table, "salesman_member_id")
	o.VoucherImg = field.NewString(table, "voucher_img")

	o.fillFieldMap()

	return o
}

func (o *order) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *order) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 117)
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["order_no"] = o.OrderNo
	o.fieldMap["site_id"] = o.SiteID
	o.fieldMap["site_name"] = o.SiteName
	o.fieldMap["website_id"] = o.WebsiteID
	o.fieldMap["order_name"] = o.OrderName
	o.fieldMap["order_from"] = o.OrderFrom
	o.fieldMap["order_from_name"] = o.OrderFromName
	o.fieldMap["order_type"] = o.OrderType
	o.fieldMap["order_type_name"] = o.OrderTypeName
	o.fieldMap["order_promotion_type"] = o.OrderPromotionType
	o.fieldMap["order_promotion_name"] = o.OrderPromotionName
	o.fieldMap["promotion_id"] = o.PromotionID
	o.fieldMap["out_trade_no"] = o.OutTradeNo
	o.fieldMap["out_trade_no_2"] = o.OutTradeNo2
	o.fieldMap["delivery_code"] = o.DeliveryCode
	o.fieldMap["order_status"] = o.OrderStatus
	o.fieldMap["order_status_name"] = o.OrderStatusName
	o.fieldMap["order_status_action"] = o.OrderStatusAction
	o.fieldMap["pay_status"] = o.PayStatus
	o.fieldMap["delivery_status"] = o.DeliveryStatus
	o.fieldMap["refund_status"] = o.RefundStatus
	o.fieldMap["pay_type"] = o.PayType
	o.fieldMap["pay_type_name"] = o.PayTypeName
	o.fieldMap["delivery_type"] = o.DeliveryType
	o.fieldMap["delivery_type_name"] = o.DeliveryTypeName
	o.fieldMap["member_id"] = o.MemberID
	o.fieldMap["name"] = o.Name
	o.fieldMap["mobile"] = o.Mobile
	o.fieldMap["telephone"] = o.Telephone
	o.fieldMap["province_id"] = o.ProvinceID
	o.fieldMap["city_id"] = o.CityID
	o.fieldMap["district_id"] = o.DistrictID
	o.fieldMap["community_id"] = o.CommunityID
	o.fieldMap["address"] = o.Address
	o.fieldMap["full_address"] = o.FullAddress
	o.fieldMap["longitude"] = o.Longitude
	o.fieldMap["latitude"] = o.Latitude
	o.fieldMap["buyer_ip"] = o.BuyerIP
	o.fieldMap["buyer_ask_delivery_time"] = o.BuyerAskDeliveryTime
	o.fieldMap["buyer_message"] = o.BuyerMessage
	o.fieldMap["goods_money"] = o.GoodsMoney
	o.fieldMap["delivery_money"] = o.DeliveryMoney
	o.fieldMap["promotion_money"] = o.PromotionMoney
	o.fieldMap["coupon_id"] = o.CouponID
	o.fieldMap["coupon_money"] = o.CouponMoney
	o.fieldMap["invoice_money"] = o.InvoiceMoney
	o.fieldMap["order_money"] = o.OrderMoney
	o.fieldMap["adjust_money"] = o.AdjustMoney
	o.fieldMap["balance_money"] = o.BalanceMoney
	o.fieldMap["pay_money"] = o.PayMoney
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["pay_time"] = o.PayTime
	o.fieldMap["delivery_time"] = o.DeliveryTime
	o.fieldMap["sign_time"] = o.SignTime
	o.fieldMap["finish_time"] = o.FinishTime
	o.fieldMap["close_time"] = o.CloseTime
	o.fieldMap["is_lock"] = o.IsLock
	o.fieldMap["is_evaluate"] = o.IsEvaluate
	o.fieldMap["is_delete"] = o.IsDelete
	o.fieldMap["is_enable_refund"] = o.IsEnableRefund
	o.fieldMap["remark"] = o.Remark
	o.fieldMap["goods_num"] = o.GoodsNum
	o.fieldMap["delivery_store_id"] = o.DeliveryStoreID
	o.fieldMap["delivery_status_name"] = o.DeliveryStatusName
	o.fieldMap["is_settlement"] = o.IsSettlement
	o.fieldMap["store_settlement_id"] = o.StoreSettlementID
	o.fieldMap["delivery_store_name"] = o.DeliveryStoreName
	o.fieldMap["promotion_type"] = o.PromotionType
	o.fieldMap["promotion_type_name"] = o.PromotionTypeName
	o.fieldMap["promotion_status_name"] = o.PromotionStatusName
	o.fieldMap["delivery_store_info"] = o.DeliveryStoreInfo
	o.fieldMap["virtual_code"] = o.VirtualCode
	o.fieldMap["evaluate_status"] = o.EvaluateStatus
	o.fieldMap["evaluate_status_name"] = o.EvaluateStatusName
	o.fieldMap["refund_money"] = o.RefundMoney
	o.fieldMap["commission"] = o.Commission
	o.fieldMap["is_invoice"] = o.IsInvoice
	o.fieldMap["invoice_type"] = o.InvoiceType
	o.fieldMap["invoice_title"] = o.InvoiceTitle
	o.fieldMap["taxpayer_number"] = o.TaxpayerNumber
	o.fieldMap["invoice_rate"] = o.InvoiceRate
	o.fieldMap["invoice_content"] = o.InvoiceContent
	o.fieldMap["invoice_delivery_money"] = o.InvoiceDeliveryMoney
	o.fieldMap["invoice_full_address"] = o.InvoiceFullAddress
	o.fieldMap["is_tax_invoice"] = o.IsTaxInvoice
	o.fieldMap["invoice_email"] = o.InvoiceEmail
	o.fieldMap["invoice_title_type"] = o.InvoiceTitleType
	o.fieldMap["is_fenxiao"] = o.IsFenxiao
	o.fieldMap["point_money"] = o.PointMoney
	o.fieldMap["member_card_money"] = o.MemberCardMoney
	o.fieldMap["member_card_order"] = o.MemberCardOrder
	o.fieldMap["invoice_status"] = o.InvoiceStatus
	o.fieldMap["invoice_remark"] = o.InvoiceRemark
	o.fieldMap["invoice_code"] = o.InvoiceCode
	o.fieldMap["invoice_image"] = o.InvoiceImage
	o.fieldMap["invoice_time"] = o.InvoiceTime
	o.fieldMap["predict_delivery_time"] = o.PredictDeliveryTime
	o.fieldMap["is_video_number"] = o.IsVideoNumber
	o.fieldMap["sync_time"] = o.SyncTime
	o.fieldMap["is_getfree_order"] = o.IsGetfreeOrder
	o.fieldMap["is_discount_order"] = o.IsDiscountOrder
	o.fieldMap["is_chinese_medicine"] = o.IsChineseMedicine
	o.fieldMap["is_sale_control"] = o.IsSaleControl
	o.fieldMap["fenxiao_member_id"] = o.FenxiaoMemberID
	o.fieldMap["settle_type_id"] = o.SettleTypeID
	o.fieldMap["discount_money"] = o.DiscountMoney
	o.fieldMap["agent_pay_openid"] = o.AgentPayOpenid
	o.fieldMap["receipt_type"] = o.ReceiptType
	o.fieldMap["employeename"] = o.Employeename
	o.fieldMap["employeecode"] = o.Employeecode
	o.fieldMap["salesman_member_id"] = o.SalesmanMemberID
	o.fieldMap["voucher_img"] = o.VoucherImg

}

func (o order) clone(db *gorm.DB) order {
	o.orderDo.ReplaceConnPool(db.Statement.ConnPool)
	o.OrderGoods.db = db.Session(&gorm.Session{Initialized: true})
	o.OrderGoods.db.Statement.ConnPool = db.Statement.ConnPool
	o.StaffSalesman.db = db.Session(&gorm.Session{Initialized: true})
	o.StaffSalesman.db.Statement.ConnPool = db.Statement.ConnPool
	o.SettlementType.db = db.Session(&gorm.Session{Initialized: true})
	o.SettlementType.db.Statement.ConnPool = db.Statement.ConnPool
	o.Member.db = db.Session(&gorm.Session{Initialized: true})
	o.Member.db.Statement.ConnPool = db.Statement.ConnPool
	return o
}

func (o order) replaceDB(db *gorm.DB) order {
	o.orderDo.ReplaceDB(db)
	o.OrderGoods.db = db.Session(&gorm.Session{})
	o.StaffSalesman.db = db.Session(&gorm.Session{})
	o.SettlementType.db = db.Session(&gorm.Session{})
	o.Member.db = db.Session(&gorm.Session{})
	return o
}

type orderHasManyOrderGoods struct {
	db *gorm.DB

	field.RelationField

	Goods struct {
		field.RelationField
	}
}

func (a orderHasManyOrderGoods) Where(conds ...field.Expr) *orderHasManyOrderGoods {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a orderHasManyOrderGoods) WithContext(ctx context.Context) *orderHasManyOrderGoods {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a orderHasManyOrderGoods) Session(session *gorm.Session) *orderHasManyOrderGoods {
	a.db = a.db.Session(session)
	return &a
}

func (a orderHasManyOrderGoods) Model(m *shop_model.Order) *orderHasManyOrderGoodsTx {
	return &orderHasManyOrderGoodsTx{a.db.Model(m).Association(a.Name())}
}

func (a orderHasManyOrderGoods) Unscoped() *orderHasManyOrderGoods {
	a.db = a.db.Unscoped()
	return &a
}

type orderHasManyOrderGoodsTx struct{ tx *gorm.Association }

func (a orderHasManyOrderGoodsTx) Find() (result []*shop_model.OrderGoods, err error) {
	return result, a.tx.Find(&result)
}

func (a orderHasManyOrderGoodsTx) Append(values ...*shop_model.OrderGoods) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a orderHasManyOrderGoodsTx) Replace(values ...*shop_model.OrderGoods) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a orderHasManyOrderGoodsTx) Delete(values ...*shop_model.OrderGoods) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a orderHasManyOrderGoodsTx) Clear() error {
	return a.tx.Clear()
}

func (a orderHasManyOrderGoodsTx) Count() int64 {
	return a.tx.Count()
}

func (a orderHasManyOrderGoodsTx) Unscoped() *orderHasManyOrderGoodsTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type orderHasOneStaffSalesman struct {
	db *gorm.DB

	field.RelationField
}

func (a orderHasOneStaffSalesman) Where(conds ...field.Expr) *orderHasOneStaffSalesman {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a orderHasOneStaffSalesman) WithContext(ctx context.Context) *orderHasOneStaffSalesman {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a orderHasOneStaffSalesman) Session(session *gorm.Session) *orderHasOneStaffSalesman {
	a.db = a.db.Session(session)
	return &a
}

func (a orderHasOneStaffSalesman) Model(m *shop_model.Order) *orderHasOneStaffSalesmanTx {
	return &orderHasOneStaffSalesmanTx{a.db.Model(m).Association(a.Name())}
}

func (a orderHasOneStaffSalesman) Unscoped() *orderHasOneStaffSalesman {
	a.db = a.db.Unscoped()
	return &a
}

type orderHasOneStaffSalesmanTx struct{ tx *gorm.Association }

func (a orderHasOneStaffSalesmanTx) Find() (result *shop_model.StaffSalesman, err error) {
	return result, a.tx.Find(&result)
}

func (a orderHasOneStaffSalesmanTx) Append(values ...*shop_model.StaffSalesman) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a orderHasOneStaffSalesmanTx) Replace(values ...*shop_model.StaffSalesman) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a orderHasOneStaffSalesmanTx) Delete(values ...*shop_model.StaffSalesman) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a orderHasOneStaffSalesmanTx) Clear() error {
	return a.tx.Clear()
}

func (a orderHasOneStaffSalesmanTx) Count() int64 {
	return a.tx.Count()
}

func (a orderHasOneStaffSalesmanTx) Unscoped() *orderHasOneStaffSalesmanTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type orderHasOneSettlementType struct {
	db *gorm.DB

	field.RelationField
}

func (a orderHasOneSettlementType) Where(conds ...field.Expr) *orderHasOneSettlementType {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a orderHasOneSettlementType) WithContext(ctx context.Context) *orderHasOneSettlementType {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a orderHasOneSettlementType) Session(session *gorm.Session) *orderHasOneSettlementType {
	a.db = a.db.Session(session)
	return &a
}

func (a orderHasOneSettlementType) Model(m *shop_model.Order) *orderHasOneSettlementTypeTx {
	return &orderHasOneSettlementTypeTx{a.db.Model(m).Association(a.Name())}
}

func (a orderHasOneSettlementType) Unscoped() *orderHasOneSettlementType {
	a.db = a.db.Unscoped()
	return &a
}

type orderHasOneSettlementTypeTx struct{ tx *gorm.Association }

func (a orderHasOneSettlementTypeTx) Find() (result *shop_model.OrderSettlementType, err error) {
	return result, a.tx.Find(&result)
}

func (a orderHasOneSettlementTypeTx) Append(values ...*shop_model.OrderSettlementType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a orderHasOneSettlementTypeTx) Replace(values ...*shop_model.OrderSettlementType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a orderHasOneSettlementTypeTx) Delete(values ...*shop_model.OrderSettlementType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a orderHasOneSettlementTypeTx) Clear() error {
	return a.tx.Clear()
}

func (a orderHasOneSettlementTypeTx) Count() int64 {
	return a.tx.Count()
}

func (a orderHasOneSettlementTypeTx) Unscoped() *orderHasOneSettlementTypeTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type orderHasOneMember struct {
	db *gorm.DB

	field.RelationField
}

func (a orderHasOneMember) Where(conds ...field.Expr) *orderHasOneMember {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a orderHasOneMember) WithContext(ctx context.Context) *orderHasOneMember {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a orderHasOneMember) Session(session *gorm.Session) *orderHasOneMember {
	a.db = a.db.Session(session)
	return &a
}

func (a orderHasOneMember) Model(m *shop_model.Order) *orderHasOneMemberTx {
	return &orderHasOneMemberTx{a.db.Model(m).Association(a.Name())}
}

func (a orderHasOneMember) Unscoped() *orderHasOneMember {
	a.db = a.db.Unscoped()
	return &a
}

type orderHasOneMemberTx struct{ tx *gorm.Association }

func (a orderHasOneMemberTx) Find() (result *shop_model.Member, err error) {
	return result, a.tx.Find(&result)
}

func (a orderHasOneMemberTx) Append(values ...*shop_model.Member) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a orderHasOneMemberTx) Replace(values ...*shop_model.Member) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a orderHasOneMemberTx) Delete(values ...*shop_model.Member) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a orderHasOneMemberTx) Clear() error {
	return a.tx.Clear()
}

func (a orderHasOneMemberTx) Count() int64 {
	return a.tx.Count()
}

func (a orderHasOneMemberTx) Unscoped() *orderHasOneMemberTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type orderDo struct{ gen.DO }

type IOrderDo interface {
	gen.SubQuery
	Debug() IOrderDo
	WithContext(ctx context.Context) IOrderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderDo
	WriteDB() IOrderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderDo
	Not(conds ...gen.Condition) IOrderDo
	Or(conds ...gen.Condition) IOrderDo
	Select(conds ...field.Expr) IOrderDo
	Where(conds ...gen.Condition) IOrderDo
	Order(conds ...field.Expr) IOrderDo
	Distinct(cols ...field.Expr) IOrderDo
	Omit(cols ...field.Expr) IOrderDo
	Join(table schema.Tabler, on ...field.Expr) IOrderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderDo
	Group(cols ...field.Expr) IOrderDo
	Having(conds ...gen.Condition) IOrderDo
	Limit(limit int) IOrderDo
	Offset(offset int) IOrderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderDo
	Unscoped() IOrderDo
	Create(values ...*shop_model.Order) error
	CreateInBatches(values []*shop_model.Order, batchSize int) error
	Save(values ...*shop_model.Order) error
	First() (*shop_model.Order, error)
	Take() (*shop_model.Order, error)
	Last() (*shop_model.Order, error)
	Find() ([]*shop_model.Order, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*shop_model.Order, err error)
	FindInBatches(result *[]*shop_model.Order, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*shop_model.Order) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderDo
	Assign(attrs ...field.AssignExpr) IOrderDo
	Joins(fields ...field.RelationField) IOrderDo
	Preload(fields ...field.RelationField) IOrderDo
	FirstOrInit() (*shop_model.Order, error)
	FirstOrCreate() (*shop_model.Order, error)
	FindByPage(offset int, limit int) (result []*shop_model.Order, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderDo) Debug() IOrderDo {
	return o.withDO(o.DO.Debug())
}

func (o orderDo) WithContext(ctx context.Context) IOrderDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderDo) ReadDB() IOrderDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderDo) WriteDB() IOrderDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderDo) Session(config *gorm.Session) IOrderDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderDo) Clauses(conds ...clause.Expression) IOrderDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderDo) Returning(value interface{}, columns ...string) IOrderDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderDo) Not(conds ...gen.Condition) IOrderDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderDo) Or(conds ...gen.Condition) IOrderDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderDo) Select(conds ...field.Expr) IOrderDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderDo) Where(conds ...gen.Condition) IOrderDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderDo) Order(conds ...field.Expr) IOrderDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderDo) Distinct(cols ...field.Expr) IOrderDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderDo) Omit(cols ...field.Expr) IOrderDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderDo) Join(table schema.Tabler, on ...field.Expr) IOrderDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderDo) Group(cols ...field.Expr) IOrderDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderDo) Having(conds ...gen.Condition) IOrderDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderDo) Limit(limit int) IOrderDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderDo) Offset(offset int) IOrderDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderDo) Unscoped() IOrderDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderDo) Create(values ...*shop_model.Order) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderDo) CreateInBatches(values []*shop_model.Order, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderDo) Save(values ...*shop_model.Order) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderDo) First() (*shop_model.Order, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.Order), nil
	}
}

func (o orderDo) Take() (*shop_model.Order, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.Order), nil
	}
}

func (o orderDo) Last() (*shop_model.Order, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.Order), nil
	}
}

func (o orderDo) Find() ([]*shop_model.Order, error) {
	result, err := o.DO.Find()
	return result.([]*shop_model.Order), err
}

func (o orderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*shop_model.Order, err error) {
	buf := make([]*shop_model.Order, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderDo) FindInBatches(result *[]*shop_model.Order, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderDo) Attrs(attrs ...field.AssignExpr) IOrderDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderDo) Assign(attrs ...field.AssignExpr) IOrderDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderDo) Joins(fields ...field.RelationField) IOrderDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderDo) Preload(fields ...field.RelationField) IOrderDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderDo) FirstOrInit() (*shop_model.Order, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.Order), nil
	}
}

func (o orderDo) FirstOrCreate() (*shop_model.Order, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.Order), nil
	}
}

func (o orderDo) FindByPage(offset int, limit int) (result []*shop_model.Order, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderDo) Delete(models ...*shop_model.Order) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderDo) withDO(do gen.Dao) *orderDo {
	o.DO = *do.(*gen.DO)
	return o
}
