// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package shop_query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"app/internal/orm/shop_model"
)

func newErpInvoice(db *gorm.DB, opts ...gen.DOOption) erpInvoice {
	_erpInvoice := erpInvoice{}

	_erpInvoice.erpInvoiceDo.UseDB(db, opts...)
	_erpInvoice.erpInvoiceDo.UseModel(&shop_model.ErpInvoice{})

	tableName := _erpInvoice.erpInvoiceDo.TableName()
	_erpInvoice.ALL = field.NewAsterisk(tableName)
	_erpInvoice.ID = field.NewInt32(tableName, "id")
	_erpInvoice.InvoiceID = field.NewString(tableName, "invoice_id")
	_erpInvoice.InvoiceCode = field.NewString(tableName, "invoice_code")
	_erpInvoice.InvoiceNo = field.NewString(tableName, "invoice_no")
	_erpInvoice.SecurityCode = field.NewString(tableName, "security_code")
	_erpInvoice.InvoiceImgURL = field.NewString(tableName, "invoice_img_url")
	_erpInvoice.InvoicePdfURL = field.NewString(tableName, "invoice_pdf_url")
	_erpInvoice.MemberID = field.NewInt32(tableName, "member_id")
	_erpInvoice.OrderNo = field.NewString(tableName, "order_no")
	_erpInvoice.OriginCreateTime = field.NewString(tableName, "origin_create_time")
	_erpInvoice.CreateTime = field.NewUint(tableName, "create_time")

	_erpInvoice.fillFieldMap()

	return _erpInvoice
}

// erpInvoice ERP同步的发票数据
type erpInvoice struct {
	erpInvoiceDo

	ALL              field.Asterisk
	ID               field.Int32
	InvoiceID        field.String // 发票唯一id
	InvoiceCode      field.String // 发票代码
	InvoiceNo        field.String // 发票号码
	SecurityCode     field.String // 发票防伪码
	InvoiceImgURL    field.String // 发票图片的URL，与pdf至少必传一个
	InvoicePdfURL    field.String // 发票PDF的URL，与图片至少必传一个
	MemberID         field.Int32  // 客户ERPID
	OrderNo          field.String // 小程序订单编号
	OriginCreateTime field.String // 开票时间 如2006-01-02 03:04:05
	CreateTime       field.Uint

	fieldMap map[string]field.Expr
}

func (e erpInvoice) Table(newTableName string) *erpInvoice {
	e.erpInvoiceDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e erpInvoice) As(alias string) *erpInvoice {
	e.erpInvoiceDo.DO = *(e.erpInvoiceDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *erpInvoice) updateTableName(table string) *erpInvoice {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.InvoiceID = field.NewString(table, "invoice_id")
	e.InvoiceCode = field.NewString(table, "invoice_code")
	e.InvoiceNo = field.NewString(table, "invoice_no")
	e.SecurityCode = field.NewString(table, "security_code")
	e.InvoiceImgURL = field.NewString(table, "invoice_img_url")
	e.InvoicePdfURL = field.NewString(table, "invoice_pdf_url")
	e.MemberID = field.NewInt32(table, "member_id")
	e.OrderNo = field.NewString(table, "order_no")
	e.OriginCreateTime = field.NewString(table, "origin_create_time")
	e.CreateTime = field.NewUint(table, "create_time")

	e.fillFieldMap()

	return e
}

func (e *erpInvoice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *erpInvoice) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 11)
	e.fieldMap["id"] = e.ID
	e.fieldMap["invoice_id"] = e.InvoiceID
	e.fieldMap["invoice_code"] = e.InvoiceCode
	e.fieldMap["invoice_no"] = e.InvoiceNo
	e.fieldMap["security_code"] = e.SecurityCode
	e.fieldMap["invoice_img_url"] = e.InvoiceImgURL
	e.fieldMap["invoice_pdf_url"] = e.InvoicePdfURL
	e.fieldMap["member_id"] = e.MemberID
	e.fieldMap["order_no"] = e.OrderNo
	e.fieldMap["origin_create_time"] = e.OriginCreateTime
	e.fieldMap["create_time"] = e.CreateTime
}

func (e erpInvoice) clone(db *gorm.DB) erpInvoice {
	e.erpInvoiceDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e erpInvoice) replaceDB(db *gorm.DB) erpInvoice {
	e.erpInvoiceDo.ReplaceDB(db)
	return e
}

type erpInvoiceDo struct{ gen.DO }

type IErpInvoiceDo interface {
	gen.SubQuery
	Debug() IErpInvoiceDo
	WithContext(ctx context.Context) IErpInvoiceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IErpInvoiceDo
	WriteDB() IErpInvoiceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IErpInvoiceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IErpInvoiceDo
	Not(conds ...gen.Condition) IErpInvoiceDo
	Or(conds ...gen.Condition) IErpInvoiceDo
	Select(conds ...field.Expr) IErpInvoiceDo
	Where(conds ...gen.Condition) IErpInvoiceDo
	Order(conds ...field.Expr) IErpInvoiceDo
	Distinct(cols ...field.Expr) IErpInvoiceDo
	Omit(cols ...field.Expr) IErpInvoiceDo
	Join(table schema.Tabler, on ...field.Expr) IErpInvoiceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IErpInvoiceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IErpInvoiceDo
	Group(cols ...field.Expr) IErpInvoiceDo
	Having(conds ...gen.Condition) IErpInvoiceDo
	Limit(limit int) IErpInvoiceDo
	Offset(offset int) IErpInvoiceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IErpInvoiceDo
	Unscoped() IErpInvoiceDo
	Create(values ...*shop_model.ErpInvoice) error
	CreateInBatches(values []*shop_model.ErpInvoice, batchSize int) error
	Save(values ...*shop_model.ErpInvoice) error
	First() (*shop_model.ErpInvoice, error)
	Take() (*shop_model.ErpInvoice, error)
	Last() (*shop_model.ErpInvoice, error)
	Find() ([]*shop_model.ErpInvoice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*shop_model.ErpInvoice, err error)
	FindInBatches(result *[]*shop_model.ErpInvoice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*shop_model.ErpInvoice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IErpInvoiceDo
	Assign(attrs ...field.AssignExpr) IErpInvoiceDo
	Joins(fields ...field.RelationField) IErpInvoiceDo
	Preload(fields ...field.RelationField) IErpInvoiceDo
	FirstOrInit() (*shop_model.ErpInvoice, error)
	FirstOrCreate() (*shop_model.ErpInvoice, error)
	FindByPage(offset int, limit int) (result []*shop_model.ErpInvoice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IErpInvoiceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e erpInvoiceDo) Debug() IErpInvoiceDo {
	return e.withDO(e.DO.Debug())
}

func (e erpInvoiceDo) WithContext(ctx context.Context) IErpInvoiceDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e erpInvoiceDo) ReadDB() IErpInvoiceDo {
	return e.Clauses(dbresolver.Read)
}

func (e erpInvoiceDo) WriteDB() IErpInvoiceDo {
	return e.Clauses(dbresolver.Write)
}

func (e erpInvoiceDo) Session(config *gorm.Session) IErpInvoiceDo {
	return e.withDO(e.DO.Session(config))
}

func (e erpInvoiceDo) Clauses(conds ...clause.Expression) IErpInvoiceDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e erpInvoiceDo) Returning(value interface{}, columns ...string) IErpInvoiceDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e erpInvoiceDo) Not(conds ...gen.Condition) IErpInvoiceDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e erpInvoiceDo) Or(conds ...gen.Condition) IErpInvoiceDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e erpInvoiceDo) Select(conds ...field.Expr) IErpInvoiceDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e erpInvoiceDo) Where(conds ...gen.Condition) IErpInvoiceDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e erpInvoiceDo) Order(conds ...field.Expr) IErpInvoiceDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e erpInvoiceDo) Distinct(cols ...field.Expr) IErpInvoiceDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e erpInvoiceDo) Omit(cols ...field.Expr) IErpInvoiceDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e erpInvoiceDo) Join(table schema.Tabler, on ...field.Expr) IErpInvoiceDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e erpInvoiceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IErpInvoiceDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e erpInvoiceDo) RightJoin(table schema.Tabler, on ...field.Expr) IErpInvoiceDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e erpInvoiceDo) Group(cols ...field.Expr) IErpInvoiceDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e erpInvoiceDo) Having(conds ...gen.Condition) IErpInvoiceDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e erpInvoiceDo) Limit(limit int) IErpInvoiceDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e erpInvoiceDo) Offset(offset int) IErpInvoiceDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e erpInvoiceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IErpInvoiceDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e erpInvoiceDo) Unscoped() IErpInvoiceDo {
	return e.withDO(e.DO.Unscoped())
}

func (e erpInvoiceDo) Create(values ...*shop_model.ErpInvoice) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e erpInvoiceDo) CreateInBatches(values []*shop_model.ErpInvoice, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e erpInvoiceDo) Save(values ...*shop_model.ErpInvoice) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e erpInvoiceDo) First() (*shop_model.ErpInvoice, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.ErpInvoice), nil
	}
}

func (e erpInvoiceDo) Take() (*shop_model.ErpInvoice, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.ErpInvoice), nil
	}
}

func (e erpInvoiceDo) Last() (*shop_model.ErpInvoice, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.ErpInvoice), nil
	}
}

func (e erpInvoiceDo) Find() ([]*shop_model.ErpInvoice, error) {
	result, err := e.DO.Find()
	return result.([]*shop_model.ErpInvoice), err
}

func (e erpInvoiceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*shop_model.ErpInvoice, err error) {
	buf := make([]*shop_model.ErpInvoice, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e erpInvoiceDo) FindInBatches(result *[]*shop_model.ErpInvoice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e erpInvoiceDo) Attrs(attrs ...field.AssignExpr) IErpInvoiceDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e erpInvoiceDo) Assign(attrs ...field.AssignExpr) IErpInvoiceDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e erpInvoiceDo) Joins(fields ...field.RelationField) IErpInvoiceDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e erpInvoiceDo) Preload(fields ...field.RelationField) IErpInvoiceDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e erpInvoiceDo) FirstOrInit() (*shop_model.ErpInvoice, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.ErpInvoice), nil
	}
}

func (e erpInvoiceDo) FirstOrCreate() (*shop_model.ErpInvoice, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.ErpInvoice), nil
	}
}

func (e erpInvoiceDo) FindByPage(offset int, limit int) (result []*shop_model.ErpInvoice, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e erpInvoiceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e erpInvoiceDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e erpInvoiceDo) Delete(models ...*shop_model.ErpInvoice) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *erpInvoiceDo) withDO(do gen.Dao) *erpInvoiceDo {
	e.DO = *do.(*gen.DO)
	return e
}
