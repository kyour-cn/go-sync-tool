// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package shop_query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"app/internal/orm/shop_model"
)

func newGoods(db *gorm.DB, opts ...gen.DOOption) goods {
	_goods := goods{}

	_goods.goodsDo.UseDB(db, opts...)
	_goods.goodsDo.UseModel(&shop_model.Goods{})

	tableName := _goods.goodsDo.TableName()
	_goods.ALL = field.NewAsterisk(tableName)
	_goods.GoodsID = field.NewInt32(tableName, "goods_id")
	_goods.GoodsName = field.NewString(tableName, "goods_name")
	_goods.GoodsClass = field.NewInt32(tableName, "goods_class")
	_goods.GoodsClassName = field.NewString(tableName, "goods_class_name")
	_goods.GoodsAttrClass = field.NewInt32(tableName, "goods_attr_class")
	_goods.GoodsAttrName = field.NewString(tableName, "goods_attr_name")
	_goods.SiteID = field.NewInt32(tableName, "site_id")
	_goods.SiteName = field.NewString(tableName, "site_name")
	_goods.GoodsImage = field.NewString(tableName, "goods_image")
	_goods.GoodsContent = field.NewString(tableName, "goods_content")
	_goods.GoodsState = field.NewInt32(tableName, "goods_state")
	_goods.CategoryID = field.NewString(tableName, "category_id")
	_goods.CategoryJSON = field.NewString(tableName, "category_json")
	_goods.Price = field.NewFloat64(tableName, "price")
	_goods.MarketPrice = field.NewFloat64(tableName, "market_price")
	_goods.CostPrice = field.NewFloat64(tableName, "cost_price")
	_goods.GoodsStock = field.NewInt32(tableName, "goods_stock")
	_goods.GoodsStockAlarm = field.NewInt32(tableName, "goods_stock_alarm")
	_goods.IsVirtual = field.NewInt32(tableName, "is_virtual")
	_goods.VirtualIndate = field.NewInt32(tableName, "virtual_indate")
	_goods.IsFreeShipping = field.NewInt32(tableName, "is_free_shipping")
	_goods.ShippingTemplate = field.NewInt32(tableName, "shipping_template")
	_goods.GoodsSpecFormat = field.NewString(tableName, "goods_spec_format")
	_goods.GoodsAttrFormat = field.NewString(tableName, "goods_attr_format")
	_goods.IsDelete = field.NewInt32(tableName, "is_delete")
	_goods.Introduction = field.NewString(tableName, "introduction")
	_goods.Keywords = field.NewString(tableName, "keywords")
	_goods.Unit = field.NewString(tableName, "unit")
	_goods.Sort = field.NewInt32(tableName, "sort")
	_goods.CreateTime = field.NewUint(tableName, "create_time")
	_goods.ModifyTime = field.NewInt32(tableName, "modify_time")
	_goods.VideoURL = field.NewString(tableName, "video_url")
	_goods.SaleNum = field.NewInt32(tableName, "sale_num")
	_goods.Evaluate = field.NewInt32(tableName, "evaluate")
	_goods.EvaluateShaitu = field.NewInt32(tableName, "evaluate_shaitu")
	_goods.EvaluateShipin = field.NewInt32(tableName, "evaluate_shipin")
	_goods.EvaluateZhuiping = field.NewInt32(tableName, "evaluate_zhuiping")
	_goods.EvaluateHaoping = field.NewInt32(tableName, "evaluate_haoping")
	_goods.EvaluateZhongping = field.NewInt32(tableName, "evaluate_zhongping")
	_goods.EvaluateChaping = field.NewInt32(tableName, "evaluate_chaping")
	_goods.IsFenxiao = field.NewBool(tableName, "is_fenxiao")
	_goods.FenxiaoType = field.NewBool(tableName, "fenxiao_type")
	_goods.SupplierID = field.NewInt32(tableName, "supplier_id")
	_goods.IsConsumeDiscount = field.NewBool(tableName, "is_consume_discount")
	_goods.DiscountConfig = field.NewBool(tableName, "discount_config")
	_goods.DiscountMethod = field.NewString(tableName, "discount_method")
	_goods.SkuID = field.NewInt32(tableName, "sku_id")
	_goods.PromotionAddon = field.NewString(tableName, "promotion_addon")
	_goods.GoodsServiceIds = field.NewString(tableName, "goods_service_ids")
	_goods.LabelID = field.NewString(tableName, "label_id")
	_goods.VirtualSale = field.NewInt32(tableName, "virtual_sale")
	_goods.MaxBuy = field.NewInt32(tableName, "max_buy")
	_goods.MinBuy = field.NewInt32(tableName, "min_buy")
	_goods.RecommendWay = field.NewInt32(tableName, "recommend_way")
	_goods.TimerOn = field.NewInt32(tableName, "timer_on")
	_goods.TimerOff = field.NewInt32(tableName, "timer_off")
	_goods.IsNeedVerify = field.NewInt32(tableName, "is_need_verify")
	_goods.VerifyValidityType = field.NewInt32(tableName, "verify_validity_type")
	_goods.IsLimit = field.NewInt32(tableName, "is_limit")
	_goods.LimitType = field.NewInt32(tableName, "limit_type")
	_goods.LimitTime = field.NewInt32(tableName, "limit_time")
	_goods.QrID = field.NewInt32(tableName, "qr_id")
	_goods.TemplateID = field.NewInt32(tableName, "template_id")
	_goods.SuccessEvaluateNum = field.NewInt32(tableName, "success_evaluate_num")
	_goods.FailEvaluateNum = field.NewInt32(tableName, "fail_evaluate_num")
	_goods.WaitEvaluateNum = field.NewInt32(tableName, "wait_evaluate_num")
	_goods.GoodsErpSpid = field.NewString(tableName, "goods_erp_spid")
	_goods.IsKongxiao = field.NewInt32(tableName, "is_kongxiao")
	_goods.IsSyncGoodsState = field.NewInt32(tableName, "is_sync_goods_state")
	_goods.GoodsArea = field.NewString(tableName, "goods_area")
	_goods.GoodsAreaID = field.NewInt32(tableName, "goods_area_id")
	_goods.BarCode = field.NewString(tableName, "bar_code")
	_goods.GoodsNum = field.NewString(tableName, "goods_num")
	_goods.BusinessScope = field.NewString(tableName, "business_scope")
	_goods.BusinessScopeName = field.NewString(tableName, "business_scope_name")
	_goods.Manufactor = field.NewString(tableName, "manufactor")
	_goods.GoodsFlag = field.NewString(tableName, "goods_flag")
	_goods.Packsize = field.NewInt32(tableName, "packsize")
	_goods.Currencyname = field.NewString(tableName, "currencyname")
	_goods.AttrDosageForm = field.NewString(tableName, "attr_dosage_form")
	_goods.InventoryDisplay = field.NewString(tableName, "inventory_display")
	_goods.PriceSync = field.NewInt32(tableName, "price_sync")
	_goods.StockSync = field.NewInt32(tableName, "stock_sync")
	_goods.MinBuySync = field.NewInt32(tableName, "min_buy_sync")
	_goods.IsPresale = field.NewInt32(tableName, "is_presale")
	_goods.OffSalesLabelIds = field.NewString(tableName, "off_sales_label_ids")
	_goods.OffReason = field.NewString(tableName, "off_reason")
	_goods.TaxRate = field.NewFloat64(tableName, "tax_rate")
	_goods.ExtensionData = field.NewString(tableName, "extension_data")
	_goods.BrandID = field.NewInt32(tableName, "brand_id")
	_goods.BrandName = field.NewString(tableName, "brand_name")
	_goods.QixieZilei = field.NewInt32(tableName, "qixie_zilei")
	_goods.Gspflag = field.NewInt32(tableName, "gspflag")
	_goods.SalesmanIsJoin = field.NewBool(tableName, "salesman_is_join")
	_goods.GoodsLabel = field.NewString(tableName, "goods_label")
	_goods.YibaoType = field.NewString(tableName, "yibao_type")
	_goods.YibaoNo = field.NewString(tableName, "yibao_no")
	_goods.IsMedicinal = field.NewInt32(tableName, "is_medicinal")
	_goods.ProductData = field.NewString(tableName, "product_data")
	_goods.InspectionData = field.NewString(tableName, "inspection_data")
	_goods.TraceabilityCode = field.NewInt32(tableName, "traceability_code")
	_goods.DzjgCode = field.NewInt32(tableName, "dzjg_code")
	_goods.IsJc = field.NewInt32(tableName, "is_jc")
	_goods.SyncImageTime = field.NewInt32(tableName, "sync_image_time")
	_goods.AutoOut = field.NewInt32(tableName, "auto_out")

	_goods.fillFieldMap()

	return _goods
}

// goods 商品表
type goods struct {
	goodsDo

	ALL                field.Asterisk
	GoodsID            field.Int32   // 商品id
	GoodsName          field.String  // 商品名称
	GoodsClass         field.Int32   // 商品种类1.实物商品2.虚拟商品3.卡券商品
	GoodsClassName     field.String  // 商品种类
	GoodsAttrClass     field.Int32   // 商品类型id
	GoodsAttrName      field.String  // 商品类型名称
	SiteID             field.Int32   // 所属店铺id
	SiteName           field.String  // 所属店铺名称
	GoodsImage         field.String  // 商品主图路径
	GoodsContent       field.String  // 商品详情
	GoodsState         field.Int32   // 商品状态（1.正常0下架）
	CategoryID         field.String  // 商品分类id,逗号隔开
	CategoryJSON       field.String  // 分类json字符串
	Price              field.Float64 // 商品价格（取第一个sku）
	MarketPrice        field.Float64 // 划线价格（取第一个sku）
	CostPrice          field.Float64 // 成本价（取第一个sku）
	GoodsStock         field.Int32   // 商品库存（总和）
	GoodsStockAlarm    field.Int32   // 库存预警
	IsVirtual          field.Int32   // 是否虚拟类商品（0实物1.虚拟）
	VirtualIndate      field.Int32   // 虚拟商品有效期
	IsFreeShipping     field.Int32   // 是否免邮
	ShippingTemplate   field.Int32   // 指定运费模板
	GoodsSpecFormat    field.String  // 商品规格格式
	GoodsAttrFormat    field.String  // 商品属性格式
	IsDelete           field.Int32   // 是否已经删除
	Introduction       field.String  // 促销语
	Keywords           field.String  // 关键词
	Unit               field.String  // 单位
	Sort               field.Int32   // 排序
	CreateTime         field.Uint    // 创建时间
	ModifyTime         field.Int32   // 修改时间
	VideoURL           field.String  // 视频
	SaleNum            field.Int32   // 销量
	Evaluate           field.Int32   // 评价数
	EvaluateShaitu     field.Int32   // 评价晒图数
	EvaluateShipin     field.Int32   // 评价视频数
	EvaluateZhuiping   field.Int32   // 评价追评数
	EvaluateHaoping    field.Int32   // 评价好评数
	EvaluateZhongping  field.Int32   // 评价中评数
	EvaluateChaping    field.Int32   // 评价差评数
	IsFenxiao          field.Bool    // 参与分销（0不参与 1参与）
	FenxiaoType        field.Bool    // 分销佣金类型（1默认  2自行设置）
	SupplierID         field.Int32   // 供应商id
	IsConsumeDiscount  field.Bool    // 是否参与会员等级折扣
	DiscountConfig     field.Bool    // 优惠设置（0默认 1自定义）
	DiscountMethod     field.String  // 优惠方式（discount打折 manjian 满减 fixed_price 指定价格）
	SkuID              field.Int32   // sku_id
	PromotionAddon     field.String  // 当前参与的营销活动，逗号分隔（限时折扣、团购、拼团、秒杀、专题活动）
	GoodsServiceIds    field.String  // 商品服务id
	LabelID            field.String  // 商品分组id
	VirtualSale        field.Int32   // 虚拟销量
	MaxBuy             field.Int32   // 限购
	MinBuy             field.Int32   // 起购数
	RecommendWay       field.Int32   // 推荐方式，1：新品，2：精品，3；推荐
	TimerOn            field.Int32   // 定时上架
	TimerOff           field.Int32   // 定时下架
	IsNeedVerify       field.Int32   // 是否需要核销
	VerifyValidityType field.Int32   // 核销有效期类型 0：永久有效 1：购买后x天有效 2：指定过期日期
	IsLimit            field.Int32   // 商品是否限购(0:否 1:是)
	LimitType          field.Int32   // 限购类型(1:单次限购 2:长期限购)
	LimitTime          field.Int32   // 限购秒数(0为长期限购)
	QrID               field.Int32   // 社群二维码id
	TemplateID         field.Int32   // 海报id
	SuccessEvaluateNum field.Int32   // 评价审核通过数
	FailEvaluateNum    field.Int32   // 评价审核失败数
	WaitEvaluateNum    field.Int32   // 评价待审核数
	GoodsErpSpid       field.String  // erp商品唯一标识
	IsKongxiao         field.Int32   // 是否控销产品 0:不是 1：是--可删除、需清除代码
	IsSyncGoodsState   field.Int32   // 是否自动上下架 0:不是 1：是
	GoodsArea          field.String  // 商品对应erp的库区
	GoodsAreaID        field.Int32   // 库存id
	BarCode            field.String  // 商品条码
	GoodsNum           field.String  // 商品编码
	BusinessScope      field.String  // 商品属于的经营范围
	BusinessScopeName  field.String  // 商品属于的经营范围名称
	Manufactor         field.String  // 生产厂家 [new]
	GoodsFlag          field.String  // ERP字段 GOODS_FLAG--可删除、需清除代码
	Packsize           field.Int32   // 件装量
	Currencyname       field.String  // 商品名
	AttrDosageForm     field.String  // 剂型
	InventoryDisplay   field.String  // 新增：库存显示
	PriceSync          field.Int32   // 是否同步价格
	StockSync          field.Int32   // 是否同步库存
	MinBuySync         field.Int32   // 是否同步中包装
	IsPresale          field.Int32   // 是否预售 （暂时弃用）
	OffSalesLabelIds   field.String  // 禁止销售的会员类型id列表，为空则不限制
	OffReason          field.String  // 下架原因
	TaxRate            field.Float64 // 税率 单位:百分比
	ExtensionData      field.String  // 拓展属性，同属，只是格式不同
	BrandID            field.Int32   // 品牌id
	BrandName          field.String  // 品牌名称
	QixieZilei         field.Int32   // 器械子类 两位数字
	Gspflag            field.Int32   // GSP管控 1=管控
	SalesmanIsJoin     field.Bool    // 业务员是否参与（0不参与 1参与）
	GoodsLabel         field.String  // 处方药类别
	YibaoType          field.String  // 医保类别
	YibaoNo            field.String  // 医保编码
	IsMedicinal        field.Int32   // 是否中药，0=否 1=是
	ProductData        field.String  // 产品资料
	InspectionData     field.String  // 检验报告
	TraceabilityCode   field.Int32   // 追溯码，0=否 1=是
	DzjgCode           field.Int32   // 电子监管码标志，0=否 1=是
	IsJc               field.Int32   // 是否集采，0=否 1=是
	SyncImageTime      field.Int32   // 商品图片同步时间
	AutoOut            field.Int32   // 0未处理 1自动下架

	fieldMap map[string]field.Expr
}

func (g goods) Table(newTableName string) *goods {
	g.goodsDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goods) As(alias string) *goods {
	g.goodsDo.DO = *(g.goodsDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goods) updateTableName(table string) *goods {
	g.ALL = field.NewAsterisk(table)
	g.GoodsID = field.NewInt32(table, "goods_id")
	g.GoodsName = field.NewString(table, "goods_name")
	g.GoodsClass = field.NewInt32(table, "goods_class")
	g.GoodsClassName = field.NewString(table, "goods_class_name")
	g.GoodsAttrClass = field.NewInt32(table, "goods_attr_class")
	g.GoodsAttrName = field.NewString(table, "goods_attr_name")
	g.SiteID = field.NewInt32(table, "site_id")
	g.SiteName = field.NewString(table, "site_name")
	g.GoodsImage = field.NewString(table, "goods_image")
	g.GoodsContent = field.NewString(table, "goods_content")
	g.GoodsState = field.NewInt32(table, "goods_state")
	g.CategoryID = field.NewString(table, "category_id")
	g.CategoryJSON = field.NewString(table, "category_json")
	g.Price = field.NewFloat64(table, "price")
	g.MarketPrice = field.NewFloat64(table, "market_price")
	g.CostPrice = field.NewFloat64(table, "cost_price")
	g.GoodsStock = field.NewInt32(table, "goods_stock")
	g.GoodsStockAlarm = field.NewInt32(table, "goods_stock_alarm")
	g.IsVirtual = field.NewInt32(table, "is_virtual")
	g.VirtualIndate = field.NewInt32(table, "virtual_indate")
	g.IsFreeShipping = field.NewInt32(table, "is_free_shipping")
	g.ShippingTemplate = field.NewInt32(table, "shipping_template")
	g.GoodsSpecFormat = field.NewString(table, "goods_spec_format")
	g.GoodsAttrFormat = field.NewString(table, "goods_attr_format")
	g.IsDelete = field.NewInt32(table, "is_delete")
	g.Introduction = field.NewString(table, "introduction")
	g.Keywords = field.NewString(table, "keywords")
	g.Unit = field.NewString(table, "unit")
	g.Sort = field.NewInt32(table, "sort")
	g.CreateTime = field.NewUint(table, "create_time")
	g.ModifyTime = field.NewInt32(table, "modify_time")
	g.VideoURL = field.NewString(table, "video_url")
	g.SaleNum = field.NewInt32(table, "sale_num")
	g.Evaluate = field.NewInt32(table, "evaluate")
	g.EvaluateShaitu = field.NewInt32(table, "evaluate_shaitu")
	g.EvaluateShipin = field.NewInt32(table, "evaluate_shipin")
	g.EvaluateZhuiping = field.NewInt32(table, "evaluate_zhuiping")
	g.EvaluateHaoping = field.NewInt32(table, "evaluate_haoping")
	g.EvaluateZhongping = field.NewInt32(table, "evaluate_zhongping")
	g.EvaluateChaping = field.NewInt32(table, "evaluate_chaping")
	g.IsFenxiao = field.NewBool(table, "is_fenxiao")
	g.FenxiaoType = field.NewBool(table, "fenxiao_type")
	g.SupplierID = field.NewInt32(table, "supplier_id")
	g.IsConsumeDiscount = field.NewBool(table, "is_consume_discount")
	g.DiscountConfig = field.NewBool(table, "discount_config")
	g.DiscountMethod = field.NewString(table, "discount_method")
	g.SkuID = field.NewInt32(table, "sku_id")
	g.PromotionAddon = field.NewString(table, "promotion_addon")
	g.GoodsServiceIds = field.NewString(table, "goods_service_ids")
	g.LabelID = field.NewString(table, "label_id")
	g.VirtualSale = field.NewInt32(table, "virtual_sale")
	g.MaxBuy = field.NewInt32(table, "max_buy")
	g.MinBuy = field.NewInt32(table, "min_buy")
	g.RecommendWay = field.NewInt32(table, "recommend_way")
	g.TimerOn = field.NewInt32(table, "timer_on")
	g.TimerOff = field.NewInt32(table, "timer_off")
	g.IsNeedVerify = field.NewInt32(table, "is_need_verify")
	g.VerifyValidityType = field.NewInt32(table, "verify_validity_type")
	g.IsLimit = field.NewInt32(table, "is_limit")
	g.LimitType = field.NewInt32(table, "limit_type")
	g.LimitTime = field.NewInt32(table, "limit_time")
	g.QrID = field.NewInt32(table, "qr_id")
	g.TemplateID = field.NewInt32(table, "template_id")
	g.SuccessEvaluateNum = field.NewInt32(table, "success_evaluate_num")
	g.FailEvaluateNum = field.NewInt32(table, "fail_evaluate_num")
	g.WaitEvaluateNum = field.NewInt32(table, "wait_evaluate_num")
	g.GoodsErpSpid = field.NewString(table, "goods_erp_spid")
	g.IsKongxiao = field.NewInt32(table, "is_kongxiao")
	g.IsSyncGoodsState = field.NewInt32(table, "is_sync_goods_state")
	g.GoodsArea = field.NewString(table, "goods_area")
	g.GoodsAreaID = field.NewInt32(table, "goods_area_id")
	g.BarCode = field.NewString(table, "bar_code")
	g.GoodsNum = field.NewString(table, "goods_num")
	g.BusinessScope = field.NewString(table, "business_scope")
	g.BusinessScopeName = field.NewString(table, "business_scope_name")
	g.Manufactor = field.NewString(table, "manufactor")
	g.GoodsFlag = field.NewString(table, "goods_flag")
	g.Packsize = field.NewInt32(table, "packsize")
	g.Currencyname = field.NewString(table, "currencyname")
	g.AttrDosageForm = field.NewString(table, "attr_dosage_form")
	g.InventoryDisplay = field.NewString(table, "inventory_display")
	g.PriceSync = field.NewInt32(table, "price_sync")
	g.StockSync = field.NewInt32(table, "stock_sync")
	g.MinBuySync = field.NewInt32(table, "min_buy_sync")
	g.IsPresale = field.NewInt32(table, "is_presale")
	g.OffSalesLabelIds = field.NewString(table, "off_sales_label_ids")
	g.OffReason = field.NewString(table, "off_reason")
	g.TaxRate = field.NewFloat64(table, "tax_rate")
	g.ExtensionData = field.NewString(table, "extension_data")
	g.BrandID = field.NewInt32(table, "brand_id")
	g.BrandName = field.NewString(table, "brand_name")
	g.QixieZilei = field.NewInt32(table, "qixie_zilei")
	g.Gspflag = field.NewInt32(table, "gspflag")
	g.SalesmanIsJoin = field.NewBool(table, "salesman_is_join")
	g.GoodsLabel = field.NewString(table, "goods_label")
	g.YibaoType = field.NewString(table, "yibao_type")
	g.YibaoNo = field.NewString(table, "yibao_no")
	g.IsMedicinal = field.NewInt32(table, "is_medicinal")
	g.ProductData = field.NewString(table, "product_data")
	g.InspectionData = field.NewString(table, "inspection_data")
	g.TraceabilityCode = field.NewInt32(table, "traceability_code")
	g.DzjgCode = field.NewInt32(table, "dzjg_code")
	g.IsJc = field.NewInt32(table, "is_jc")
	g.SyncImageTime = field.NewInt32(table, "sync_image_time")
	g.AutoOut = field.NewInt32(table, "auto_out")

	g.fillFieldMap()

	return g
}

func (g *goods) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goods) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 105)
	g.fieldMap["goods_id"] = g.GoodsID
	g.fieldMap["goods_name"] = g.GoodsName
	g.fieldMap["goods_class"] = g.GoodsClass
	g.fieldMap["goods_class_name"] = g.GoodsClassName
	g.fieldMap["goods_attr_class"] = g.GoodsAttrClass
	g.fieldMap["goods_attr_name"] = g.GoodsAttrName
	g.fieldMap["site_id"] = g.SiteID
	g.fieldMap["site_name"] = g.SiteName
	g.fieldMap["goods_image"] = g.GoodsImage
	g.fieldMap["goods_content"] = g.GoodsContent
	g.fieldMap["goods_state"] = g.GoodsState
	g.fieldMap["category_id"] = g.CategoryID
	g.fieldMap["category_json"] = g.CategoryJSON
	g.fieldMap["price"] = g.Price
	g.fieldMap["market_price"] = g.MarketPrice
	g.fieldMap["cost_price"] = g.CostPrice
	g.fieldMap["goods_stock"] = g.GoodsStock
	g.fieldMap["goods_stock_alarm"] = g.GoodsStockAlarm
	g.fieldMap["is_virtual"] = g.IsVirtual
	g.fieldMap["virtual_indate"] = g.VirtualIndate
	g.fieldMap["is_free_shipping"] = g.IsFreeShipping
	g.fieldMap["shipping_template"] = g.ShippingTemplate
	g.fieldMap["goods_spec_format"] = g.GoodsSpecFormat
	g.fieldMap["goods_attr_format"] = g.GoodsAttrFormat
	g.fieldMap["is_delete"] = g.IsDelete
	g.fieldMap["introduction"] = g.Introduction
	g.fieldMap["keywords"] = g.Keywords
	g.fieldMap["unit"] = g.Unit
	g.fieldMap["sort"] = g.Sort
	g.fieldMap["create_time"] = g.CreateTime
	g.fieldMap["modify_time"] = g.ModifyTime
	g.fieldMap["video_url"] = g.VideoURL
	g.fieldMap["sale_num"] = g.SaleNum
	g.fieldMap["evaluate"] = g.Evaluate
	g.fieldMap["evaluate_shaitu"] = g.EvaluateShaitu
	g.fieldMap["evaluate_shipin"] = g.EvaluateShipin
	g.fieldMap["evaluate_zhuiping"] = g.EvaluateZhuiping
	g.fieldMap["evaluate_haoping"] = g.EvaluateHaoping
	g.fieldMap["evaluate_zhongping"] = g.EvaluateZhongping
	g.fieldMap["evaluate_chaping"] = g.EvaluateChaping
	g.fieldMap["is_fenxiao"] = g.IsFenxiao
	g.fieldMap["fenxiao_type"] = g.FenxiaoType
	g.fieldMap["supplier_id"] = g.SupplierID
	g.fieldMap["is_consume_discount"] = g.IsConsumeDiscount
	g.fieldMap["discount_config"] = g.DiscountConfig
	g.fieldMap["discount_method"] = g.DiscountMethod
	g.fieldMap["sku_id"] = g.SkuID
	g.fieldMap["promotion_addon"] = g.PromotionAddon
	g.fieldMap["goods_service_ids"] = g.GoodsServiceIds
	g.fieldMap["label_id"] = g.LabelID
	g.fieldMap["virtual_sale"] = g.VirtualSale
	g.fieldMap["max_buy"] = g.MaxBuy
	g.fieldMap["min_buy"] = g.MinBuy
	g.fieldMap["recommend_way"] = g.RecommendWay
	g.fieldMap["timer_on"] = g.TimerOn
	g.fieldMap["timer_off"] = g.TimerOff
	g.fieldMap["is_need_verify"] = g.IsNeedVerify
	g.fieldMap["verify_validity_type"] = g.VerifyValidityType
	g.fieldMap["is_limit"] = g.IsLimit
	g.fieldMap["limit_type"] = g.LimitType
	g.fieldMap["limit_time"] = g.LimitTime
	g.fieldMap["qr_id"] = g.QrID
	g.fieldMap["template_id"] = g.TemplateID
	g.fieldMap["success_evaluate_num"] = g.SuccessEvaluateNum
	g.fieldMap["fail_evaluate_num"] = g.FailEvaluateNum
	g.fieldMap["wait_evaluate_num"] = g.WaitEvaluateNum
	g.fieldMap["goods_erp_spid"] = g.GoodsErpSpid
	g.fieldMap["is_kongxiao"] = g.IsKongxiao
	g.fieldMap["is_sync_goods_state"] = g.IsSyncGoodsState
	g.fieldMap["goods_area"] = g.GoodsArea
	g.fieldMap["goods_area_id"] = g.GoodsAreaID
	g.fieldMap["bar_code"] = g.BarCode
	g.fieldMap["goods_num"] = g.GoodsNum
	g.fieldMap["business_scope"] = g.BusinessScope
	g.fieldMap["business_scope_name"] = g.BusinessScopeName
	g.fieldMap["manufactor"] = g.Manufactor
	g.fieldMap["goods_flag"] = g.GoodsFlag
	g.fieldMap["packsize"] = g.Packsize
	g.fieldMap["currencyname"] = g.Currencyname
	g.fieldMap["attr_dosage_form"] = g.AttrDosageForm
	g.fieldMap["inventory_display"] = g.InventoryDisplay
	g.fieldMap["price_sync"] = g.PriceSync
	g.fieldMap["stock_sync"] = g.StockSync
	g.fieldMap["min_buy_sync"] = g.MinBuySync
	g.fieldMap["is_presale"] = g.IsPresale
	g.fieldMap["off_sales_label_ids"] = g.OffSalesLabelIds
	g.fieldMap["off_reason"] = g.OffReason
	g.fieldMap["tax_rate"] = g.TaxRate
	g.fieldMap["extension_data"] = g.ExtensionData
	g.fieldMap["brand_id"] = g.BrandID
	g.fieldMap["brand_name"] = g.BrandName
	g.fieldMap["qixie_zilei"] = g.QixieZilei
	g.fieldMap["gspflag"] = g.Gspflag
	g.fieldMap["salesman_is_join"] = g.SalesmanIsJoin
	g.fieldMap["goods_label"] = g.GoodsLabel
	g.fieldMap["yibao_type"] = g.YibaoType
	g.fieldMap["yibao_no"] = g.YibaoNo
	g.fieldMap["is_medicinal"] = g.IsMedicinal
	g.fieldMap["product_data"] = g.ProductData
	g.fieldMap["inspection_data"] = g.InspectionData
	g.fieldMap["traceability_code"] = g.TraceabilityCode
	g.fieldMap["dzjg_code"] = g.DzjgCode
	g.fieldMap["is_jc"] = g.IsJc
	g.fieldMap["sync_image_time"] = g.SyncImageTime
	g.fieldMap["auto_out"] = g.AutoOut
}

func (g goods) clone(db *gorm.DB) goods {
	g.goodsDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g goods) replaceDB(db *gorm.DB) goods {
	g.goodsDo.ReplaceDB(db)
	return g
}

type goodsDo struct{ gen.DO }

type IGoodsDo interface {
	gen.SubQuery
	Debug() IGoodsDo
	WithContext(ctx context.Context) IGoodsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGoodsDo
	WriteDB() IGoodsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGoodsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGoodsDo
	Not(conds ...gen.Condition) IGoodsDo
	Or(conds ...gen.Condition) IGoodsDo
	Select(conds ...field.Expr) IGoodsDo
	Where(conds ...gen.Condition) IGoodsDo
	Order(conds ...field.Expr) IGoodsDo
	Distinct(cols ...field.Expr) IGoodsDo
	Omit(cols ...field.Expr) IGoodsDo
	Join(table schema.Tabler, on ...field.Expr) IGoodsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGoodsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGoodsDo
	Group(cols ...field.Expr) IGoodsDo
	Having(conds ...gen.Condition) IGoodsDo
	Limit(limit int) IGoodsDo
	Offset(offset int) IGoodsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGoodsDo
	Unscoped() IGoodsDo
	Create(values ...*shop_model.Goods) error
	CreateInBatches(values []*shop_model.Goods, batchSize int) error
	Save(values ...*shop_model.Goods) error
	First() (*shop_model.Goods, error)
	Take() (*shop_model.Goods, error)
	Last() (*shop_model.Goods, error)
	Find() ([]*shop_model.Goods, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*shop_model.Goods, err error)
	FindInBatches(result *[]*shop_model.Goods, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*shop_model.Goods) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGoodsDo
	Assign(attrs ...field.AssignExpr) IGoodsDo
	Joins(fields ...field.RelationField) IGoodsDo
	Preload(fields ...field.RelationField) IGoodsDo
	FirstOrInit() (*shop_model.Goods, error)
	FirstOrCreate() (*shop_model.Goods, error)
	FindByPage(offset int, limit int) (result []*shop_model.Goods, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGoodsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g goodsDo) Debug() IGoodsDo {
	return g.withDO(g.DO.Debug())
}

func (g goodsDo) WithContext(ctx context.Context) IGoodsDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goodsDo) ReadDB() IGoodsDo {
	return g.Clauses(dbresolver.Read)
}

func (g goodsDo) WriteDB() IGoodsDo {
	return g.Clauses(dbresolver.Write)
}

func (g goodsDo) Session(config *gorm.Session) IGoodsDo {
	return g.withDO(g.DO.Session(config))
}

func (g goodsDo) Clauses(conds ...clause.Expression) IGoodsDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goodsDo) Returning(value interface{}, columns ...string) IGoodsDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goodsDo) Not(conds ...gen.Condition) IGoodsDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goodsDo) Or(conds ...gen.Condition) IGoodsDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goodsDo) Select(conds ...field.Expr) IGoodsDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goodsDo) Where(conds ...gen.Condition) IGoodsDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goodsDo) Order(conds ...field.Expr) IGoodsDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goodsDo) Distinct(cols ...field.Expr) IGoodsDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goodsDo) Omit(cols ...field.Expr) IGoodsDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goodsDo) Join(table schema.Tabler, on ...field.Expr) IGoodsDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goodsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGoodsDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goodsDo) RightJoin(table schema.Tabler, on ...field.Expr) IGoodsDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goodsDo) Group(cols ...field.Expr) IGoodsDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goodsDo) Having(conds ...gen.Condition) IGoodsDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goodsDo) Limit(limit int) IGoodsDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goodsDo) Offset(offset int) IGoodsDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goodsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGoodsDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goodsDo) Unscoped() IGoodsDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goodsDo) Create(values ...*shop_model.Goods) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goodsDo) CreateInBatches(values []*shop_model.Goods, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goodsDo) Save(values ...*shop_model.Goods) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goodsDo) First() (*shop_model.Goods, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.Goods), nil
	}
}

func (g goodsDo) Take() (*shop_model.Goods, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.Goods), nil
	}
}

func (g goodsDo) Last() (*shop_model.Goods, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.Goods), nil
	}
}

func (g goodsDo) Find() ([]*shop_model.Goods, error) {
	result, err := g.DO.Find()
	return result.([]*shop_model.Goods), err
}

func (g goodsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*shop_model.Goods, err error) {
	buf := make([]*shop_model.Goods, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goodsDo) FindInBatches(result *[]*shop_model.Goods, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goodsDo) Attrs(attrs ...field.AssignExpr) IGoodsDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goodsDo) Assign(attrs ...field.AssignExpr) IGoodsDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goodsDo) Joins(fields ...field.RelationField) IGoodsDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goodsDo) Preload(fields ...field.RelationField) IGoodsDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goodsDo) FirstOrInit() (*shop_model.Goods, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.Goods), nil
	}
}

func (g goodsDo) FirstOrCreate() (*shop_model.Goods, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.Goods), nil
	}
}

func (g goodsDo) FindByPage(offset int, limit int) (result []*shop_model.Goods, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goodsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goodsDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goodsDo) Delete(models ...*shop_model.Goods) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goodsDo) withDO(do gen.Dao) *goodsDo {
	g.DO = *do.(*gen.DO)
	return g
}
