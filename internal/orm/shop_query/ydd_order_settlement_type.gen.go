// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package shop_query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"app/internal/orm/shop_model"
)

func newOrderSettlementType(db *gorm.DB, opts ...gen.DOOption) orderSettlementType {
	_orderSettlementType := orderSettlementType{}

	_orderSettlementType.orderSettlementTypeDo.UseDB(db, opts...)
	_orderSettlementType.orderSettlementTypeDo.UseModel(&shop_model.OrderSettlementType{})

	tableName := _orderSettlementType.orderSettlementTypeDo.TableName()
	_orderSettlementType.ALL = field.NewAsterisk(tableName)
	_orderSettlementType.ID = field.NewInt32(tableName, "id")
	_orderSettlementType.Name = field.NewString(tableName, "name")
	_orderSettlementType.IsPay = field.NewBool(tableName, "is_pay")
	_orderSettlementType.IsAutoPay = field.NewBool(tableName, "is_auto_pay")
	_orderSettlementType.Remark = field.NewString(tableName, "remark")
	_orderSettlementType.Sort = field.NewInt32(tableName, "sort")
	_orderSettlementType.Status = field.NewInt32(tableName, "status")
	_orderSettlementType.JSONData = field.NewString(tableName, "json_data")
	_orderSettlementType.Type = field.NewInt32(tableName, "type")

	_orderSettlementType.fillFieldMap()

	return _orderSettlementType
}

// orderSettlementType 订单结算方式
type orderSettlementType struct {
	orderSettlementTypeDo

	ALL       field.Asterisk
	ID        field.Int32
	Name      field.String // 支付方式名称
	IsPay     field.Bool   // 是否调起支付
	IsAutoPay field.Bool   // 提交订单时是否自动支付
	Remark    field.String // 备注
	Sort      field.Int32  // 排序 ASC
	Status    field.Int32  // 状态
	JSONData  field.String // 配置信息
	Type      field.Int32  // 0无 1公对公资料 2=资信下单

	fieldMap map[string]field.Expr
}

func (o orderSettlementType) Table(newTableName string) *orderSettlementType {
	o.orderSettlementTypeDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderSettlementType) As(alias string) *orderSettlementType {
	o.orderSettlementTypeDo.DO = *(o.orderSettlementTypeDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderSettlementType) updateTableName(table string) *orderSettlementType {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt32(table, "id")
	o.Name = field.NewString(table, "name")
	o.IsPay = field.NewBool(table, "is_pay")
	o.IsAutoPay = field.NewBool(table, "is_auto_pay")
	o.Remark = field.NewString(table, "remark")
	o.Sort = field.NewInt32(table, "sort")
	o.Status = field.NewInt32(table, "status")
	o.JSONData = field.NewString(table, "json_data")
	o.Type = field.NewInt32(table, "type")

	o.fillFieldMap()

	return o
}

func (o *orderSettlementType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderSettlementType) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 9)
	o.fieldMap["id"] = o.ID
	o.fieldMap["name"] = o.Name
	o.fieldMap["is_pay"] = o.IsPay
	o.fieldMap["is_auto_pay"] = o.IsAutoPay
	o.fieldMap["remark"] = o.Remark
	o.fieldMap["sort"] = o.Sort
	o.fieldMap["status"] = o.Status
	o.fieldMap["json_data"] = o.JSONData
	o.fieldMap["type"] = o.Type
}

func (o orderSettlementType) clone(db *gorm.DB) orderSettlementType {
	o.orderSettlementTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderSettlementType) replaceDB(db *gorm.DB) orderSettlementType {
	o.orderSettlementTypeDo.ReplaceDB(db)
	return o
}

type orderSettlementTypeDo struct{ gen.DO }

type IOrderSettlementTypeDo interface {
	gen.SubQuery
	Debug() IOrderSettlementTypeDo
	WithContext(ctx context.Context) IOrderSettlementTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderSettlementTypeDo
	WriteDB() IOrderSettlementTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderSettlementTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderSettlementTypeDo
	Not(conds ...gen.Condition) IOrderSettlementTypeDo
	Or(conds ...gen.Condition) IOrderSettlementTypeDo
	Select(conds ...field.Expr) IOrderSettlementTypeDo
	Where(conds ...gen.Condition) IOrderSettlementTypeDo
	Order(conds ...field.Expr) IOrderSettlementTypeDo
	Distinct(cols ...field.Expr) IOrderSettlementTypeDo
	Omit(cols ...field.Expr) IOrderSettlementTypeDo
	Join(table schema.Tabler, on ...field.Expr) IOrderSettlementTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderSettlementTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderSettlementTypeDo
	Group(cols ...field.Expr) IOrderSettlementTypeDo
	Having(conds ...gen.Condition) IOrderSettlementTypeDo
	Limit(limit int) IOrderSettlementTypeDo
	Offset(offset int) IOrderSettlementTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderSettlementTypeDo
	Unscoped() IOrderSettlementTypeDo
	Create(values ...*shop_model.OrderSettlementType) error
	CreateInBatches(values []*shop_model.OrderSettlementType, batchSize int) error
	Save(values ...*shop_model.OrderSettlementType) error
	First() (*shop_model.OrderSettlementType, error)
	Take() (*shop_model.OrderSettlementType, error)
	Last() (*shop_model.OrderSettlementType, error)
	Find() ([]*shop_model.OrderSettlementType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*shop_model.OrderSettlementType, err error)
	FindInBatches(result *[]*shop_model.OrderSettlementType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*shop_model.OrderSettlementType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderSettlementTypeDo
	Assign(attrs ...field.AssignExpr) IOrderSettlementTypeDo
	Joins(fields ...field.RelationField) IOrderSettlementTypeDo
	Preload(fields ...field.RelationField) IOrderSettlementTypeDo
	FirstOrInit() (*shop_model.OrderSettlementType, error)
	FirstOrCreate() (*shop_model.OrderSettlementType, error)
	FindByPage(offset int, limit int) (result []*shop_model.OrderSettlementType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderSettlementTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderSettlementTypeDo) Debug() IOrderSettlementTypeDo {
	return o.withDO(o.DO.Debug())
}

func (o orderSettlementTypeDo) WithContext(ctx context.Context) IOrderSettlementTypeDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderSettlementTypeDo) ReadDB() IOrderSettlementTypeDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderSettlementTypeDo) WriteDB() IOrderSettlementTypeDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderSettlementTypeDo) Session(config *gorm.Session) IOrderSettlementTypeDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderSettlementTypeDo) Clauses(conds ...clause.Expression) IOrderSettlementTypeDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderSettlementTypeDo) Returning(value interface{}, columns ...string) IOrderSettlementTypeDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderSettlementTypeDo) Not(conds ...gen.Condition) IOrderSettlementTypeDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderSettlementTypeDo) Or(conds ...gen.Condition) IOrderSettlementTypeDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderSettlementTypeDo) Select(conds ...field.Expr) IOrderSettlementTypeDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderSettlementTypeDo) Where(conds ...gen.Condition) IOrderSettlementTypeDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderSettlementTypeDo) Order(conds ...field.Expr) IOrderSettlementTypeDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderSettlementTypeDo) Distinct(cols ...field.Expr) IOrderSettlementTypeDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderSettlementTypeDo) Omit(cols ...field.Expr) IOrderSettlementTypeDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderSettlementTypeDo) Join(table schema.Tabler, on ...field.Expr) IOrderSettlementTypeDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderSettlementTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderSettlementTypeDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderSettlementTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderSettlementTypeDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderSettlementTypeDo) Group(cols ...field.Expr) IOrderSettlementTypeDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderSettlementTypeDo) Having(conds ...gen.Condition) IOrderSettlementTypeDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderSettlementTypeDo) Limit(limit int) IOrderSettlementTypeDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderSettlementTypeDo) Offset(offset int) IOrderSettlementTypeDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderSettlementTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderSettlementTypeDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderSettlementTypeDo) Unscoped() IOrderSettlementTypeDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderSettlementTypeDo) Create(values ...*shop_model.OrderSettlementType) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderSettlementTypeDo) CreateInBatches(values []*shop_model.OrderSettlementType, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderSettlementTypeDo) Save(values ...*shop_model.OrderSettlementType) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderSettlementTypeDo) First() (*shop_model.OrderSettlementType, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.OrderSettlementType), nil
	}
}

func (o orderSettlementTypeDo) Take() (*shop_model.OrderSettlementType, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.OrderSettlementType), nil
	}
}

func (o orderSettlementTypeDo) Last() (*shop_model.OrderSettlementType, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.OrderSettlementType), nil
	}
}

func (o orderSettlementTypeDo) Find() ([]*shop_model.OrderSettlementType, error) {
	result, err := o.DO.Find()
	return result.([]*shop_model.OrderSettlementType), err
}

func (o orderSettlementTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*shop_model.OrderSettlementType, err error) {
	buf := make([]*shop_model.OrderSettlementType, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderSettlementTypeDo) FindInBatches(result *[]*shop_model.OrderSettlementType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderSettlementTypeDo) Attrs(attrs ...field.AssignExpr) IOrderSettlementTypeDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderSettlementTypeDo) Assign(attrs ...field.AssignExpr) IOrderSettlementTypeDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderSettlementTypeDo) Joins(fields ...field.RelationField) IOrderSettlementTypeDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderSettlementTypeDo) Preload(fields ...field.RelationField) IOrderSettlementTypeDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderSettlementTypeDo) FirstOrInit() (*shop_model.OrderSettlementType, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.OrderSettlementType), nil
	}
}

func (o orderSettlementTypeDo) FirstOrCreate() (*shop_model.OrderSettlementType, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.OrderSettlementType), nil
	}
}

func (o orderSettlementTypeDo) FindByPage(offset int, limit int) (result []*shop_model.OrderSettlementType, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderSettlementTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderSettlementTypeDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderSettlementTypeDo) Delete(models ...*shop_model.OrderSettlementType) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderSettlementTypeDo) withDO(do gen.Dao) *orderSettlementTypeDo {
	o.DO = *do.(*gen.DO)
	return o
}
