// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package shop_query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"app/internal/orm/model"
)

func newMemberBusinessScope(db *gorm.DB, opts ...gen.DOOption) memberBusinessScope {
	_memberBusinessScope := memberBusinessScope{}

	_memberBusinessScope.memberBusinessScopeDo.UseDB(db, opts...)
	_memberBusinessScope.memberBusinessScopeDo.UseModel(&model.MemberBusinessScope{})

	tableName := _memberBusinessScope.memberBusinessScopeDo.TableName()
	_memberBusinessScope.ALL = field.NewAsterisk(tableName)
	_memberBusinessScope.ID = field.NewInt32(tableName, "id")
	_memberBusinessScope.ErpUID = field.NewString(tableName, "erp_uid")
	_memberBusinessScope.BusinessScope = field.NewString(tableName, "business_scope")
	_memberBusinessScope.MemberID = field.NewInt32(tableName, "member_id")
	_memberBusinessScope.Medicinetype = field.NewString(tableName, "medicinetype")
	_memberBusinessScope.DeleteTime = field.NewField(tableName, "delete_time")

	_memberBusinessScope.fillFieldMap()

	return _memberBusinessScope
}

type memberBusinessScope struct {
	memberBusinessScopeDo

	ALL           field.Asterisk
	ID            field.Int32
	ErpUID        field.String // 用户erpid
	BusinessScope field.String // 经营范围
	MemberID      field.Int32  // 用户id
	Medicinetype  field.String // 经营范围ID （new）
	DeleteTime    field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (m memberBusinessScope) Table(newTableName string) *memberBusinessScope {
	m.memberBusinessScopeDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m memberBusinessScope) As(alias string) *memberBusinessScope {
	m.memberBusinessScopeDo.DO = *(m.memberBusinessScopeDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *memberBusinessScope) updateTableName(table string) *memberBusinessScope {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.ErpUID = field.NewString(table, "erp_uid")
	m.BusinessScope = field.NewString(table, "business_scope")
	m.MemberID = field.NewInt32(table, "member_id")
	m.Medicinetype = field.NewString(table, "medicinetype")
	m.DeleteTime = field.NewField(table, "delete_time")

	m.fillFieldMap()

	return m
}

func (m *memberBusinessScope) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *memberBusinessScope) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 6)
	m.fieldMap["id"] = m.ID
	m.fieldMap["erp_uid"] = m.ErpUID
	m.fieldMap["business_scope"] = m.BusinessScope
	m.fieldMap["member_id"] = m.MemberID
	m.fieldMap["medicinetype"] = m.Medicinetype
	m.fieldMap["delete_time"] = m.DeleteTime
}

func (m memberBusinessScope) clone(db *gorm.DB) memberBusinessScope {
	m.memberBusinessScopeDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m memberBusinessScope) replaceDB(db *gorm.DB) memberBusinessScope {
	m.memberBusinessScopeDo.ReplaceDB(db)
	return m
}

type memberBusinessScopeDo struct{ gen.DO }

type IMemberBusinessScopeDo interface {
	gen.SubQuery
	Debug() IMemberBusinessScopeDo
	WithContext(ctx context.Context) IMemberBusinessScopeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMemberBusinessScopeDo
	WriteDB() IMemberBusinessScopeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMemberBusinessScopeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMemberBusinessScopeDo
	Not(conds ...gen.Condition) IMemberBusinessScopeDo
	Or(conds ...gen.Condition) IMemberBusinessScopeDo
	Select(conds ...field.Expr) IMemberBusinessScopeDo
	Where(conds ...gen.Condition) IMemberBusinessScopeDo
	Order(conds ...field.Expr) IMemberBusinessScopeDo
	Distinct(cols ...field.Expr) IMemberBusinessScopeDo
	Omit(cols ...field.Expr) IMemberBusinessScopeDo
	Join(table schema.Tabler, on ...field.Expr) IMemberBusinessScopeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMemberBusinessScopeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMemberBusinessScopeDo
	Group(cols ...field.Expr) IMemberBusinessScopeDo
	Having(conds ...gen.Condition) IMemberBusinessScopeDo
	Limit(limit int) IMemberBusinessScopeDo
	Offset(offset int) IMemberBusinessScopeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMemberBusinessScopeDo
	Unscoped() IMemberBusinessScopeDo
	Create(values ...*model.MemberBusinessScope) error
	CreateInBatches(values []*model.MemberBusinessScope, batchSize int) error
	Save(values ...*model.MemberBusinessScope) error
	First() (*model.MemberBusinessScope, error)
	Take() (*model.MemberBusinessScope, error)
	Last() (*model.MemberBusinessScope, error)
	Find() ([]*model.MemberBusinessScope, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MemberBusinessScope, err error)
	FindInBatches(result *[]*model.MemberBusinessScope, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MemberBusinessScope) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMemberBusinessScopeDo
	Assign(attrs ...field.AssignExpr) IMemberBusinessScopeDo
	Joins(fields ...field.RelationField) IMemberBusinessScopeDo
	Preload(fields ...field.RelationField) IMemberBusinessScopeDo
	FirstOrInit() (*model.MemberBusinessScope, error)
	FirstOrCreate() (*model.MemberBusinessScope, error)
	FindByPage(offset int, limit int) (result []*model.MemberBusinessScope, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMemberBusinessScopeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m memberBusinessScopeDo) Debug() IMemberBusinessScopeDo {
	return m.withDO(m.DO.Debug())
}

func (m memberBusinessScopeDo) WithContext(ctx context.Context) IMemberBusinessScopeDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m memberBusinessScopeDo) ReadDB() IMemberBusinessScopeDo {
	return m.Clauses(dbresolver.Read)
}

func (m memberBusinessScopeDo) WriteDB() IMemberBusinessScopeDo {
	return m.Clauses(dbresolver.Write)
}

func (m memberBusinessScopeDo) Session(config *gorm.Session) IMemberBusinessScopeDo {
	return m.withDO(m.DO.Session(config))
}

func (m memberBusinessScopeDo) Clauses(conds ...clause.Expression) IMemberBusinessScopeDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m memberBusinessScopeDo) Returning(value interface{}, columns ...string) IMemberBusinessScopeDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m memberBusinessScopeDo) Not(conds ...gen.Condition) IMemberBusinessScopeDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m memberBusinessScopeDo) Or(conds ...gen.Condition) IMemberBusinessScopeDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m memberBusinessScopeDo) Select(conds ...field.Expr) IMemberBusinessScopeDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m memberBusinessScopeDo) Where(conds ...gen.Condition) IMemberBusinessScopeDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m memberBusinessScopeDo) Order(conds ...field.Expr) IMemberBusinessScopeDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m memberBusinessScopeDo) Distinct(cols ...field.Expr) IMemberBusinessScopeDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m memberBusinessScopeDo) Omit(cols ...field.Expr) IMemberBusinessScopeDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m memberBusinessScopeDo) Join(table schema.Tabler, on ...field.Expr) IMemberBusinessScopeDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m memberBusinessScopeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMemberBusinessScopeDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m memberBusinessScopeDo) RightJoin(table schema.Tabler, on ...field.Expr) IMemberBusinessScopeDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m memberBusinessScopeDo) Group(cols ...field.Expr) IMemberBusinessScopeDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m memberBusinessScopeDo) Having(conds ...gen.Condition) IMemberBusinessScopeDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m memberBusinessScopeDo) Limit(limit int) IMemberBusinessScopeDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m memberBusinessScopeDo) Offset(offset int) IMemberBusinessScopeDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m memberBusinessScopeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMemberBusinessScopeDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m memberBusinessScopeDo) Unscoped() IMemberBusinessScopeDo {
	return m.withDO(m.DO.Unscoped())
}

func (m memberBusinessScopeDo) Create(values ...*model.MemberBusinessScope) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m memberBusinessScopeDo) CreateInBatches(values []*model.MemberBusinessScope, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m memberBusinessScopeDo) Save(values ...*model.MemberBusinessScope) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m memberBusinessScopeDo) First() (*model.MemberBusinessScope, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberBusinessScope), nil
	}
}

func (m memberBusinessScopeDo) Take() (*model.MemberBusinessScope, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberBusinessScope), nil
	}
}

func (m memberBusinessScopeDo) Last() (*model.MemberBusinessScope, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberBusinessScope), nil
	}
}

func (m memberBusinessScopeDo) Find() ([]*model.MemberBusinessScope, error) {
	result, err := m.DO.Find()
	return result.([]*model.MemberBusinessScope), err
}

func (m memberBusinessScopeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MemberBusinessScope, err error) {
	buf := make([]*model.MemberBusinessScope, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m memberBusinessScopeDo) FindInBatches(result *[]*model.MemberBusinessScope, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m memberBusinessScopeDo) Attrs(attrs ...field.AssignExpr) IMemberBusinessScopeDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m memberBusinessScopeDo) Assign(attrs ...field.AssignExpr) IMemberBusinessScopeDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m memberBusinessScopeDo) Joins(fields ...field.RelationField) IMemberBusinessScopeDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m memberBusinessScopeDo) Preload(fields ...field.RelationField) IMemberBusinessScopeDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m memberBusinessScopeDo) FirstOrInit() (*model.MemberBusinessScope, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberBusinessScope), nil
	}
}

func (m memberBusinessScopeDo) FirstOrCreate() (*model.MemberBusinessScope, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberBusinessScope), nil
	}
}

func (m memberBusinessScopeDo) FindByPage(offset int, limit int) (result []*model.MemberBusinessScope, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m memberBusinessScopeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m memberBusinessScopeDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m memberBusinessScopeDo) Delete(models ...*model.MemberBusinessScope) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *memberBusinessScopeDo) withDO(do gen.Dao) *memberBusinessScopeDo {
	m.DO = *do.(*gen.DO)
	return m
}
