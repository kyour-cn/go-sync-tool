// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package shop_query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"app/internal/orm/shop_model"
)

func newStaffSalesman(db *gorm.DB, opts ...gen.DOOption) staffSalesman {
	_staffSalesman := staffSalesman{}

	_staffSalesman.staffSalesmanDo.UseDB(db, opts...)
	_staffSalesman.staffSalesmanDo.UseModel(&shop_model.StaffSalesman{})

	tableName := _staffSalesman.staffSalesmanDo.TableName()
	_staffSalesman.ALL = field.NewAsterisk(tableName)
	_staffSalesman.SalesmanID = field.NewInt32(tableName, "salesman_id")
	_staffSalesman.Pid = field.NewInt32(tableName, "pid")
	_staffSalesman.MemberID = field.NewInt32(tableName, "member_id")
	_staffSalesman.FirstID = field.NewInt32(tableName, "first_id")
	_staffSalesman.SecondID = field.NewInt32(tableName, "second_id")
	_staffSalesman.RegionID = field.NewInt32(tableName, "region_id")
	_staffSalesman.SalesmanName = field.NewString(tableName, "salesman_name")
	_staffSalesman.SalesmanMobile = field.NewString(tableName, "salesman_mobile")
	_staffSalesman.SalesmanAccount = field.NewString(tableName, "salesman_account")
	_staffSalesman.Level = field.NewInt32(tableName, "level")
	_staffSalesman.ErpUID = field.NewString(tableName, "erp_uid")
	_staffSalesman.ErpSaleerID = field.NewString(tableName, "erp_saleer_id")
	_staffSalesman.Status = field.NewInt32(tableName, "status")
	_staffSalesman.AccountType = field.NewInt32(tableName, "account_type")
	_staffSalesman.Remarks = field.NewString(tableName, "remarks")
	_staffSalesman.CreatedAt = field.NewInt32(tableName, "created_at")
	_staffSalesman.UpdatedAt = field.NewInt32(tableName, "updated_at")
	_staffSalesman.DeletedAt = field.NewInt32(tableName, "deleted_at")

	_staffSalesman.fillFieldMap()

	return _staffSalesman
}

// staffSalesman 员工-业务员表
type staffSalesman struct {
	staffSalesmanDo

	ALL             field.Asterisk
	SalesmanID      field.Int32  // 业务员id
	Pid             field.Int32  // 上级id
	MemberID        field.Int32  // 在用户表的id
	FirstID         field.Int32  // 一级区域id
	SecondID        field.Int32  // 二级区域id
	RegionID        field.Int32  // 三级区域id
	SalesmanName    field.String // 业务员名称
	SalesmanMobile  field.String // 手机号
	SalesmanAccount field.String // 登录账号
	Level           field.Int32  // 区域级别 1一级 2二级 3三级
	ErpUID          field.String // ERP中的ID
	ErpSaleerID     field.String // ERP中的销售id
	Status          field.Int32  // 状态
	AccountType     field.Int32  // 账户类型 0-业务员  1-全国代理
	Remarks         field.String // 简介
	CreatedAt       field.Int32  // 创建时间
	UpdatedAt       field.Int32
	DeletedAt       field.Int32

	fieldMap map[string]field.Expr
}

func (s staffSalesman) Table(newTableName string) *staffSalesman {
	s.staffSalesmanDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s staffSalesman) As(alias string) *staffSalesman {
	s.staffSalesmanDo.DO = *(s.staffSalesmanDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *staffSalesman) updateTableName(table string) *staffSalesman {
	s.ALL = field.NewAsterisk(table)
	s.SalesmanID = field.NewInt32(table, "salesman_id")
	s.Pid = field.NewInt32(table, "pid")
	s.MemberID = field.NewInt32(table, "member_id")
	s.FirstID = field.NewInt32(table, "first_id")
	s.SecondID = field.NewInt32(table, "second_id")
	s.RegionID = field.NewInt32(table, "region_id")
	s.SalesmanName = field.NewString(table, "salesman_name")
	s.SalesmanMobile = field.NewString(table, "salesman_mobile")
	s.SalesmanAccount = field.NewString(table, "salesman_account")
	s.Level = field.NewInt32(table, "level")
	s.ErpUID = field.NewString(table, "erp_uid")
	s.ErpSaleerID = field.NewString(table, "erp_saleer_id")
	s.Status = field.NewInt32(table, "status")
	s.AccountType = field.NewInt32(table, "account_type")
	s.Remarks = field.NewString(table, "remarks")
	s.CreatedAt = field.NewInt32(table, "created_at")
	s.UpdatedAt = field.NewInt32(table, "updated_at")
	s.DeletedAt = field.NewInt32(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *staffSalesman) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *staffSalesman) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 18)
	s.fieldMap["salesman_id"] = s.SalesmanID
	s.fieldMap["pid"] = s.Pid
	s.fieldMap["member_id"] = s.MemberID
	s.fieldMap["first_id"] = s.FirstID
	s.fieldMap["second_id"] = s.SecondID
	s.fieldMap["region_id"] = s.RegionID
	s.fieldMap["salesman_name"] = s.SalesmanName
	s.fieldMap["salesman_mobile"] = s.SalesmanMobile
	s.fieldMap["salesman_account"] = s.SalesmanAccount
	s.fieldMap["level"] = s.Level
	s.fieldMap["erp_uid"] = s.ErpUID
	s.fieldMap["erp_saleer_id"] = s.ErpSaleerID
	s.fieldMap["status"] = s.Status
	s.fieldMap["account_type"] = s.AccountType
	s.fieldMap["remarks"] = s.Remarks
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s staffSalesman) clone(db *gorm.DB) staffSalesman {
	s.staffSalesmanDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s staffSalesman) replaceDB(db *gorm.DB) staffSalesman {
	s.staffSalesmanDo.ReplaceDB(db)
	return s
}

type staffSalesmanDo struct{ gen.DO }

type IStaffSalesmanDo interface {
	gen.SubQuery
	Debug() IStaffSalesmanDo
	WithContext(ctx context.Context) IStaffSalesmanDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStaffSalesmanDo
	WriteDB() IStaffSalesmanDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStaffSalesmanDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStaffSalesmanDo
	Not(conds ...gen.Condition) IStaffSalesmanDo
	Or(conds ...gen.Condition) IStaffSalesmanDo
	Select(conds ...field.Expr) IStaffSalesmanDo
	Where(conds ...gen.Condition) IStaffSalesmanDo
	Order(conds ...field.Expr) IStaffSalesmanDo
	Distinct(cols ...field.Expr) IStaffSalesmanDo
	Omit(cols ...field.Expr) IStaffSalesmanDo
	Join(table schema.Tabler, on ...field.Expr) IStaffSalesmanDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStaffSalesmanDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStaffSalesmanDo
	Group(cols ...field.Expr) IStaffSalesmanDo
	Having(conds ...gen.Condition) IStaffSalesmanDo
	Limit(limit int) IStaffSalesmanDo
	Offset(offset int) IStaffSalesmanDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStaffSalesmanDo
	Unscoped() IStaffSalesmanDo
	Create(values ...*shop_model.StaffSalesman) error
	CreateInBatches(values []*shop_model.StaffSalesman, batchSize int) error
	Save(values ...*shop_model.StaffSalesman) error
	First() (*shop_model.StaffSalesman, error)
	Take() (*shop_model.StaffSalesman, error)
	Last() (*shop_model.StaffSalesman, error)
	Find() ([]*shop_model.StaffSalesman, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*shop_model.StaffSalesman, err error)
	FindInBatches(result *[]*shop_model.StaffSalesman, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*shop_model.StaffSalesman) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStaffSalesmanDo
	Assign(attrs ...field.AssignExpr) IStaffSalesmanDo
	Joins(fields ...field.RelationField) IStaffSalesmanDo
	Preload(fields ...field.RelationField) IStaffSalesmanDo
	FirstOrInit() (*shop_model.StaffSalesman, error)
	FirstOrCreate() (*shop_model.StaffSalesman, error)
	FindByPage(offset int, limit int) (result []*shop_model.StaffSalesman, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStaffSalesmanDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s staffSalesmanDo) Debug() IStaffSalesmanDo {
	return s.withDO(s.DO.Debug())
}

func (s staffSalesmanDo) WithContext(ctx context.Context) IStaffSalesmanDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s staffSalesmanDo) ReadDB() IStaffSalesmanDo {
	return s.Clauses(dbresolver.Read)
}

func (s staffSalesmanDo) WriteDB() IStaffSalesmanDo {
	return s.Clauses(dbresolver.Write)
}

func (s staffSalesmanDo) Session(config *gorm.Session) IStaffSalesmanDo {
	return s.withDO(s.DO.Session(config))
}

func (s staffSalesmanDo) Clauses(conds ...clause.Expression) IStaffSalesmanDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s staffSalesmanDo) Returning(value interface{}, columns ...string) IStaffSalesmanDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s staffSalesmanDo) Not(conds ...gen.Condition) IStaffSalesmanDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s staffSalesmanDo) Or(conds ...gen.Condition) IStaffSalesmanDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s staffSalesmanDo) Select(conds ...field.Expr) IStaffSalesmanDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s staffSalesmanDo) Where(conds ...gen.Condition) IStaffSalesmanDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s staffSalesmanDo) Order(conds ...field.Expr) IStaffSalesmanDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s staffSalesmanDo) Distinct(cols ...field.Expr) IStaffSalesmanDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s staffSalesmanDo) Omit(cols ...field.Expr) IStaffSalesmanDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s staffSalesmanDo) Join(table schema.Tabler, on ...field.Expr) IStaffSalesmanDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s staffSalesmanDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStaffSalesmanDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s staffSalesmanDo) RightJoin(table schema.Tabler, on ...field.Expr) IStaffSalesmanDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s staffSalesmanDo) Group(cols ...field.Expr) IStaffSalesmanDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s staffSalesmanDo) Having(conds ...gen.Condition) IStaffSalesmanDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s staffSalesmanDo) Limit(limit int) IStaffSalesmanDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s staffSalesmanDo) Offset(offset int) IStaffSalesmanDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s staffSalesmanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStaffSalesmanDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s staffSalesmanDo) Unscoped() IStaffSalesmanDo {
	return s.withDO(s.DO.Unscoped())
}

func (s staffSalesmanDo) Create(values ...*shop_model.StaffSalesman) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s staffSalesmanDo) CreateInBatches(values []*shop_model.StaffSalesman, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s staffSalesmanDo) Save(values ...*shop_model.StaffSalesman) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s staffSalesmanDo) First() (*shop_model.StaffSalesman, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.StaffSalesman), nil
	}
}

func (s staffSalesmanDo) Take() (*shop_model.StaffSalesman, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.StaffSalesman), nil
	}
}

func (s staffSalesmanDo) Last() (*shop_model.StaffSalesman, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.StaffSalesman), nil
	}
}

func (s staffSalesmanDo) Find() ([]*shop_model.StaffSalesman, error) {
	result, err := s.DO.Find()
	return result.([]*shop_model.StaffSalesman), err
}

func (s staffSalesmanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*shop_model.StaffSalesman, err error) {
	buf := make([]*shop_model.StaffSalesman, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s staffSalesmanDo) FindInBatches(result *[]*shop_model.StaffSalesman, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s staffSalesmanDo) Attrs(attrs ...field.AssignExpr) IStaffSalesmanDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s staffSalesmanDo) Assign(attrs ...field.AssignExpr) IStaffSalesmanDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s staffSalesmanDo) Joins(fields ...field.RelationField) IStaffSalesmanDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s staffSalesmanDo) Preload(fields ...field.RelationField) IStaffSalesmanDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s staffSalesmanDo) FirstOrInit() (*shop_model.StaffSalesman, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.StaffSalesman), nil
	}
}

func (s staffSalesmanDo) FirstOrCreate() (*shop_model.StaffSalesman, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.StaffSalesman), nil
	}
}

func (s staffSalesmanDo) FindByPage(offset int, limit int) (result []*shop_model.StaffSalesman, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s staffSalesmanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s staffSalesmanDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s staffSalesmanDo) Delete(models ...*shop_model.StaffSalesman) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *staffSalesmanDo) withDO(do gen.Dao) *staffSalesmanDo {
	s.DO = *do.(*gen.DO)
	return s
}
