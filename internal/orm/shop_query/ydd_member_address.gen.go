// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package shop_query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"app/internal/orm/model"
)

func newMemberAddress(db *gorm.DB, opts ...gen.DOOption) memberAddress {
	_memberAddress := memberAddress{}

	_memberAddress.memberAddressDo.UseDB(db, opts...)
	_memberAddress.memberAddressDo.UseModel(&model.MemberAddress{})

	tableName := _memberAddress.memberAddressDo.TableName()
	_memberAddress.ALL = field.NewAsterisk(tableName)
	_memberAddress.ID = field.NewInt32(tableName, "id")
	_memberAddress.MemberID = field.NewInt32(tableName, "member_id")
	_memberAddress.SiteID = field.NewInt32(tableName, "site_id")
	_memberAddress.Name = field.NewString(tableName, "name")
	_memberAddress.Mobile = field.NewString(tableName, "mobile")
	_memberAddress.Telephone = field.NewString(tableName, "telephone")
	_memberAddress.ProvinceID = field.NewInt32(tableName, "province_id")
	_memberAddress.CityID = field.NewInt32(tableName, "city_id")
	_memberAddress.DistrictID = field.NewInt32(tableName, "district_id")
	_memberAddress.CommunityID = field.NewInt32(tableName, "community_id")
	_memberAddress.Address = field.NewString(tableName, "address")
	_memberAddress.FullAddress = field.NewString(tableName, "full_address")
	_memberAddress.Longitude = field.NewString(tableName, "longitude")
	_memberAddress.Latitude = field.NewString(tableName, "latitude")
	_memberAddress.IsDefault = field.NewInt32(tableName, "is_default")
	_memberAddress.Type = field.NewInt32(tableName, "type")

	_memberAddress.fillFieldMap()

	return _memberAddress
}

// memberAddress 用户地址管理
type memberAddress struct {
	memberAddressDo

	ALL         field.Asterisk
	ID          field.Int32
	MemberID    field.Int32  // 会员id
	SiteID      field.Int32  // 站点id
	Name        field.String // 用户姓名
	Mobile      field.String // 手机
	Telephone   field.String // 联系电话
	ProvinceID  field.Int32  // 省id
	CityID      field.Int32  // 市id
	DistrictID  field.Int32  // 区县id
	CommunityID field.Int32  // 社区id
	Address     field.String // 地址信息
	FullAddress field.String // 详细地址信息
	Longitude   field.String // 经度
	Latitude    field.String // 纬度
	IsDefault   field.Int32  // 是否是默认地址
	Type        field.Int32  // 地址类型  1 普通地址  2 定位地址

	fieldMap map[string]field.Expr
}

func (m memberAddress) Table(newTableName string) *memberAddress {
	m.memberAddressDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m memberAddress) As(alias string) *memberAddress {
	m.memberAddressDo.DO = *(m.memberAddressDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *memberAddress) updateTableName(table string) *memberAddress {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.MemberID = field.NewInt32(table, "member_id")
	m.SiteID = field.NewInt32(table, "site_id")
	m.Name = field.NewString(table, "name")
	m.Mobile = field.NewString(table, "mobile")
	m.Telephone = field.NewString(table, "telephone")
	m.ProvinceID = field.NewInt32(table, "province_id")
	m.CityID = field.NewInt32(table, "city_id")
	m.DistrictID = field.NewInt32(table, "district_id")
	m.CommunityID = field.NewInt32(table, "community_id")
	m.Address = field.NewString(table, "address")
	m.FullAddress = field.NewString(table, "full_address")
	m.Longitude = field.NewString(table, "longitude")
	m.Latitude = field.NewString(table, "latitude")
	m.IsDefault = field.NewInt32(table, "is_default")
	m.Type = field.NewInt32(table, "type")

	m.fillFieldMap()

	return m
}

func (m *memberAddress) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *memberAddress) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 16)
	m.fieldMap["id"] = m.ID
	m.fieldMap["member_id"] = m.MemberID
	m.fieldMap["site_id"] = m.SiteID
	m.fieldMap["name"] = m.Name
	m.fieldMap["mobile"] = m.Mobile
	m.fieldMap["telephone"] = m.Telephone
	m.fieldMap["province_id"] = m.ProvinceID
	m.fieldMap["city_id"] = m.CityID
	m.fieldMap["district_id"] = m.DistrictID
	m.fieldMap["community_id"] = m.CommunityID
	m.fieldMap["address"] = m.Address
	m.fieldMap["full_address"] = m.FullAddress
	m.fieldMap["longitude"] = m.Longitude
	m.fieldMap["latitude"] = m.Latitude
	m.fieldMap["is_default"] = m.IsDefault
	m.fieldMap["type"] = m.Type
}

func (m memberAddress) clone(db *gorm.DB) memberAddress {
	m.memberAddressDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m memberAddress) replaceDB(db *gorm.DB) memberAddress {
	m.memberAddressDo.ReplaceDB(db)
	return m
}

type memberAddressDo struct{ gen.DO }

type IMemberAddressDo interface {
	gen.SubQuery
	Debug() IMemberAddressDo
	WithContext(ctx context.Context) IMemberAddressDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMemberAddressDo
	WriteDB() IMemberAddressDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMemberAddressDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMemberAddressDo
	Not(conds ...gen.Condition) IMemberAddressDo
	Or(conds ...gen.Condition) IMemberAddressDo
	Select(conds ...field.Expr) IMemberAddressDo
	Where(conds ...gen.Condition) IMemberAddressDo
	Order(conds ...field.Expr) IMemberAddressDo
	Distinct(cols ...field.Expr) IMemberAddressDo
	Omit(cols ...field.Expr) IMemberAddressDo
	Join(table schema.Tabler, on ...field.Expr) IMemberAddressDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMemberAddressDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMemberAddressDo
	Group(cols ...field.Expr) IMemberAddressDo
	Having(conds ...gen.Condition) IMemberAddressDo
	Limit(limit int) IMemberAddressDo
	Offset(offset int) IMemberAddressDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMemberAddressDo
	Unscoped() IMemberAddressDo
	Create(values ...*model.MemberAddress) error
	CreateInBatches(values []*model.MemberAddress, batchSize int) error
	Save(values ...*model.MemberAddress) error
	First() (*model.MemberAddress, error)
	Take() (*model.MemberAddress, error)
	Last() (*model.MemberAddress, error)
	Find() ([]*model.MemberAddress, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MemberAddress, err error)
	FindInBatches(result *[]*model.MemberAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MemberAddress) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMemberAddressDo
	Assign(attrs ...field.AssignExpr) IMemberAddressDo
	Joins(fields ...field.RelationField) IMemberAddressDo
	Preload(fields ...field.RelationField) IMemberAddressDo
	FirstOrInit() (*model.MemberAddress, error)
	FirstOrCreate() (*model.MemberAddress, error)
	FindByPage(offset int, limit int) (result []*model.MemberAddress, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMemberAddressDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m memberAddressDo) Debug() IMemberAddressDo {
	return m.withDO(m.DO.Debug())
}

func (m memberAddressDo) WithContext(ctx context.Context) IMemberAddressDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m memberAddressDo) ReadDB() IMemberAddressDo {
	return m.Clauses(dbresolver.Read)
}

func (m memberAddressDo) WriteDB() IMemberAddressDo {
	return m.Clauses(dbresolver.Write)
}

func (m memberAddressDo) Session(config *gorm.Session) IMemberAddressDo {
	return m.withDO(m.DO.Session(config))
}

func (m memberAddressDo) Clauses(conds ...clause.Expression) IMemberAddressDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m memberAddressDo) Returning(value interface{}, columns ...string) IMemberAddressDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m memberAddressDo) Not(conds ...gen.Condition) IMemberAddressDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m memberAddressDo) Or(conds ...gen.Condition) IMemberAddressDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m memberAddressDo) Select(conds ...field.Expr) IMemberAddressDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m memberAddressDo) Where(conds ...gen.Condition) IMemberAddressDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m memberAddressDo) Order(conds ...field.Expr) IMemberAddressDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m memberAddressDo) Distinct(cols ...field.Expr) IMemberAddressDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m memberAddressDo) Omit(cols ...field.Expr) IMemberAddressDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m memberAddressDo) Join(table schema.Tabler, on ...field.Expr) IMemberAddressDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m memberAddressDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMemberAddressDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m memberAddressDo) RightJoin(table schema.Tabler, on ...field.Expr) IMemberAddressDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m memberAddressDo) Group(cols ...field.Expr) IMemberAddressDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m memberAddressDo) Having(conds ...gen.Condition) IMemberAddressDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m memberAddressDo) Limit(limit int) IMemberAddressDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m memberAddressDo) Offset(offset int) IMemberAddressDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m memberAddressDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMemberAddressDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m memberAddressDo) Unscoped() IMemberAddressDo {
	return m.withDO(m.DO.Unscoped())
}

func (m memberAddressDo) Create(values ...*model.MemberAddress) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m memberAddressDo) CreateInBatches(values []*model.MemberAddress, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m memberAddressDo) Save(values ...*model.MemberAddress) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m memberAddressDo) First() (*model.MemberAddress, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberAddress), nil
	}
}

func (m memberAddressDo) Take() (*model.MemberAddress, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberAddress), nil
	}
}

func (m memberAddressDo) Last() (*model.MemberAddress, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberAddress), nil
	}
}

func (m memberAddressDo) Find() ([]*model.MemberAddress, error) {
	result, err := m.DO.Find()
	return result.([]*model.MemberAddress), err
}

func (m memberAddressDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MemberAddress, err error) {
	buf := make([]*model.MemberAddress, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m memberAddressDo) FindInBatches(result *[]*model.MemberAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m memberAddressDo) Attrs(attrs ...field.AssignExpr) IMemberAddressDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m memberAddressDo) Assign(attrs ...field.AssignExpr) IMemberAddressDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m memberAddressDo) Joins(fields ...field.RelationField) IMemberAddressDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m memberAddressDo) Preload(fields ...field.RelationField) IMemberAddressDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m memberAddressDo) FirstOrInit() (*model.MemberAddress, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberAddress), nil
	}
}

func (m memberAddressDo) FirstOrCreate() (*model.MemberAddress, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberAddress), nil
	}
}

func (m memberAddressDo) FindByPage(offset int, limit int) (result []*model.MemberAddress, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m memberAddressDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m memberAddressDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m memberAddressDo) Delete(models ...*model.MemberAddress) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *memberAddressDo) withDO(do gen.Dao) *memberAddressDo {
	m.DO = *do.(*gen.DO)
	return m
}
