// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package shop_query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"app/internal/orm/shop_model"
)

func newOrderGoods(db *gorm.DB, opts ...gen.DOOption) orderGoods {
	_orderGoods := orderGoods{}

	_orderGoods.orderGoodsDo.UseDB(db, opts...)
	_orderGoods.orderGoodsDo.UseModel(&shop_model.OrderGoods{})

	tableName := _orderGoods.orderGoodsDo.TableName()
	_orderGoods.ALL = field.NewAsterisk(tableName)
	_orderGoods.OrderGoodsID = field.NewInt32(tableName, "order_goods_id")
	_orderGoods.OrderID = field.NewInt32(tableName, "order_id")
	_orderGoods.OrderNo = field.NewString(tableName, "order_no")
	_orderGoods.SiteID = field.NewInt32(tableName, "site_id")
	_orderGoods.MemberID = field.NewInt32(tableName, "member_id")
	_orderGoods.GoodsID = field.NewInt32(tableName, "goods_id")
	_orderGoods.SkuID = field.NewInt32(tableName, "sku_id")
	_orderGoods.SkuName = field.NewString(tableName, "sku_name")
	_orderGoods.SkuImage = field.NewString(tableName, "sku_image")
	_orderGoods.SkuNo = field.NewString(tableName, "sku_no")
	_orderGoods.IsVirtual = field.NewInt32(tableName, "is_virtual")
	_orderGoods.GoodsClass = field.NewInt32(tableName, "goods_class")
	_orderGoods.GoodsClassName = field.NewString(tableName, "goods_class_name")
	_orderGoods.Price = field.NewFloat64(tableName, "price")
	_orderGoods.CostPrice = field.NewFloat64(tableName, "cost_price")
	_orderGoods.Num = field.NewInt32(tableName, "num")
	_orderGoods.GoodsMoney = field.NewFloat64(tableName, "goods_money")
	_orderGoods.CostMoney = field.NewFloat64(tableName, "cost_money")
	_orderGoods.DeliveryStatus = field.NewInt32(tableName, "delivery_status")
	_orderGoods.DeliveryNo = field.NewString(tableName, "delivery_no")
	_orderGoods.GiftFlag = field.NewInt32(tableName, "gift_flag")
	_orderGoods.RefundNo = field.NewString(tableName, "refund_no")
	_orderGoods.RefundStatus = field.NewInt32(tableName, "refund_status")
	_orderGoods.RefundStatusName = field.NewString(tableName, "refund_status_name")
	_orderGoods.RefundStatusAction = field.NewString(tableName, "refund_status_action")
	_orderGoods.RefundType = field.NewInt32(tableName, "refund_type")
	_orderGoods.RefundApplyMoney = field.NewFloat64(tableName, "refund_apply_money")
	_orderGoods.RefundReason = field.NewString(tableName, "refund_reason")
	_orderGoods.RefundRealMoney = field.NewFloat64(tableName, "refund_real_money")
	_orderGoods.RefundDeliveryName = field.NewString(tableName, "refund_delivery_name")
	_orderGoods.RefundDeliveryNo = field.NewString(tableName, "refund_delivery_no")
	_orderGoods.RefundTime = field.NewInt32(tableName, "refund_time")
	_orderGoods.RefundRefuseReason = field.NewString(tableName, "refund_refuse_reason")
	_orderGoods.RefundActionTime = field.NewInt32(tableName, "refund_action_time")
	_orderGoods.DeliveryStatusName = field.NewString(tableName, "delivery_status_name")
	_orderGoods.RealGoodsMoney = field.NewFloat64(tableName, "real_goods_money")
	_orderGoods.RefundRemark = field.NewString(tableName, "refund_remark")
	_orderGoods.RefundDeliveryRemark = field.NewString(tableName, "refund_delivery_remark")
	_orderGoods.RefundAddress = field.NewString(tableName, "refund_address")
	_orderGoods.RefundExpressNum = field.NewString(tableName, "refund_express_num")
	_orderGoods.IsRefundStock = field.NewInt32(tableName, "is_refund_stock")
	_orderGoods.RefundMoneyType = field.NewInt32(tableName, "refund_money_type")
	_orderGoods.ShopActiveRefund = field.NewBool(tableName, "shop_active_refund")
	_orderGoods.ShopRefundRemark = field.NewString(tableName, "shop_refund_remark")
	_orderGoods.RefundMode = field.NewInt32(tableName, "refund_mode")
	_orderGoods.PromotionMoney = field.NewFloat64(tableName, "promotion_money")
	_orderGoods.CouponMoney = field.NewFloat64(tableName, "coupon_money")
	_orderGoods.AdjustMoney = field.NewFloat64(tableName, "adjust_money")
	_orderGoods.GoodsName = field.NewString(tableName, "goods_name")
	_orderGoods.SkuSpecFormat = field.NewString(tableName, "sku_spec_format")
	_orderGoods.IsFenxiao = field.NewInt32(tableName, "is_fenxiao")
	_orderGoods.UsePoint = field.NewInt32(tableName, "use_point")
	_orderGoods.PointMoney = field.NewFloat64(tableName, "point_money")
	_orderGoods.RefundDeliveryMoney = field.NewFloat64(tableName, "refund_delivery_money")
	_orderGoods.CreateTime = field.NewUint(tableName, "create_time")
	_orderGoods.IsGetFree = field.NewInt32(tableName, "is_get_free")
	_orderGoods.GetfreeOrderGoodsPid = field.NewInt32(tableName, "getfree_order_goods_pid")
	_orderGoods.DiscountGoodsID = field.NewInt32(tableName, "discount_goods_id")
	_orderGoods.DiscountGoodsLimit = field.NewInt32(tableName, "discount_goods_limit")
	_orderGoods.OriginalPrice = field.NewFloat64(tableName, "original_price")
	_orderGoods.IsChineseMedicine = field.NewInt32(tableName, "is_chinese_medicine")
	_orderGoods.DiscountMoney = field.NewFloat64(tableName, "discount_money")
	_orderGoods.GoodsAttr = field.NewString(tableName, "goods_attr")
	_orderGoods.IssueNum = field.NewInt32(tableName, "issue_num")
	_orderGoods.SeckillID = field.NewInt32(tableName, "seckill_id")
	_orderGoods.TaxRate = field.NewFloat64(tableName, "tax_rate")
	_orderGoods.SalesmanMemberID = field.NewInt32(tableName, "salesman_member_id")
	_orderGoods.OldOrderGoodsID = field.NewInt32(tableName, "old_order_goods_id")
	_orderGoods.PromotionLabel = field.NewString(tableName, "promotion_label")
	_orderGoods.RefundNum = field.NewInt32(tableName, "refund_num")
	_orderGoods.Goods = orderGoodsHasOneGoods{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Goods", "shop_model.Goods"),
	}

	_orderGoods.fillFieldMap()

	return _orderGoods
}

// orderGoods 订单商品表
type orderGoods struct {
	orderGoodsDo

	ALL                  field.Asterisk
	OrderGoodsID         field.Int32
	OrderID              field.Int32   // 订单id
	OrderNo              field.String  // 订单编号
	SiteID               field.Int32   // 商家id
	MemberID             field.Int32   // 购买会员id
	GoodsID              field.Int32   // 商品id
	SkuID                field.Int32   // 商品skuid
	SkuName              field.String  // 商品名称
	SkuImage             field.String  // 商品图片
	SkuNo                field.String  // 商品编码
	IsVirtual            field.Int32   // 是否是虚拟商品
	GoodsClass           field.Int32   // 商品种类(1.实物 2.虚拟3.卡券)
	GoodsClassName       field.String  // 商品类型名称
	Price                field.Float64 // 商品卖价
	CostPrice            field.Float64 // 成本价
	Num                  field.Int32   // 购买数量
	GoodsMoney           field.Float64 // 商品总价
	CostMoney            field.Float64 // 成本总价
	DeliveryStatus       field.Int32   // 配送状态
	DeliveryNo           field.String  // 配送单号
	GiftFlag             field.Int32   // 赠品标识
	RefundNo             field.String  // 退款编号（申请产生）
	RefundStatus         field.Int32   // 退款状态 0：正常状态；1退款申请中；2待转账：3；退款已完成
	RefundStatusName     field.String  // 退款状态名称
	RefundStatusAction   field.String  // 退款操作
	RefundType           field.Int32   // 退款方式
	RefundApplyMoney     field.Float64 // 退款申请金额
	RefundReason         field.String  // 退款原因
	RefundRealMoney      field.Float64 // 实际退款金额
	RefundDeliveryName   field.String  // 退款公司名称
	RefundDeliveryNo     field.String  // 退款单号
	RefundTime           field.Int32   // 实际退款时间
	RefundRefuseReason   field.String  // 退款拒绝原因
	RefundActionTime     field.Int32   // 退款时间
	DeliveryStatusName   field.String  // 配送状态名称
	RealGoodsMoney       field.Float64 // 实际商品购买价
	RefundRemark         field.String  // 退款说明
	RefundDeliveryRemark field.String  // 买家退货说明
	RefundAddress        field.String  // 退货地址
	RefundExpressNum     field.String  // 退款单号
	IsRefundStock        field.Int32   // 是否返还库存
	RefundMoneyType      field.Int32   // 退款方式   1 原路退款 2线下退款3退款到余额
	ShopActiveRefund     field.Bool    // 商家主动退款（0否  1是）
	ShopRefundRemark     field.String  // 商家退款说明
	RefundMode           field.Int32   // 退款类型 1退款 2售后
	PromotionMoney       field.Float64 // 优惠金额
	CouponMoney          field.Float64 // 优惠券金额
	AdjustMoney          field.Float64 // 调整金额
	GoodsName            field.String  // 商品名称
	SkuSpecFormat        field.String  // sku规格格式
	IsFenxiao            field.Int32
	UsePoint             field.Int32   // 积分抵扣所用积分数
	PointMoney           field.Float64 // 积分抵扣金额
	RefundDeliveryMoney  field.Float64
	CreateTime           field.Uint
	IsGetFree            field.Int32   // 0:不是换购；1：是换购
	GetfreeOrderGoodsPid field.Int32   // 换购副商品独有，指定主商品订单项
	DiscountGoodsID      field.Int32   // 参加限时折扣的优惠商品id
	DiscountGoodsLimit   field.Int32   // 商品限购数量
	OriginalPrice        field.Float64 // 商品原价
	IsChineseMedicine    field.Int32   // 是否是中药商品 0 不是 1是
	DiscountMoney        field.Float64 // 折扣、秒杀优惠金额
	GoodsAttr            field.String  // 商品属性
	IssueNum             field.Int32   // 实际发货数量（ERP）
	SeckillID            field.Int32   // 秒杀id
	TaxRate              field.Float64 // 税率
	SalesmanMemberID     field.Int32   // 代客下单业务员id，非代客下单为0（新）
	OldOrderGoodsID      field.Int32   // 部分退款旧order_goods_id
	PromotionLabel       field.String  // 活动标识
	RefundNum            field.Int32   // 退款数量
	Goods                orderGoodsHasOneGoods

	fieldMap map[string]field.Expr
}

func (o orderGoods) Table(newTableName string) *orderGoods {
	o.orderGoodsDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderGoods) As(alias string) *orderGoods {
	o.orderGoodsDo.DO = *(o.orderGoodsDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderGoods) updateTableName(table string) *orderGoods {
	o.ALL = field.NewAsterisk(table)
	o.OrderGoodsID = field.NewInt32(table, "order_goods_id")
	o.OrderID = field.NewInt32(table, "order_id")
	o.OrderNo = field.NewString(table, "order_no")
	o.SiteID = field.NewInt32(table, "site_id")
	o.MemberID = field.NewInt32(table, "member_id")
	o.GoodsID = field.NewInt32(table, "goods_id")
	o.SkuID = field.NewInt32(table, "sku_id")
	o.SkuName = field.NewString(table, "sku_name")
	o.SkuImage = field.NewString(table, "sku_image")
	o.SkuNo = field.NewString(table, "sku_no")
	o.IsVirtual = field.NewInt32(table, "is_virtual")
	o.GoodsClass = field.NewInt32(table, "goods_class")
	o.GoodsClassName = field.NewString(table, "goods_class_name")
	o.Price = field.NewFloat64(table, "price")
	o.CostPrice = field.NewFloat64(table, "cost_price")
	o.Num = field.NewInt32(table, "num")
	o.GoodsMoney = field.NewFloat64(table, "goods_money")
	o.CostMoney = field.NewFloat64(table, "cost_money")
	o.DeliveryStatus = field.NewInt32(table, "delivery_status")
	o.DeliveryNo = field.NewString(table, "delivery_no")
	o.GiftFlag = field.NewInt32(table, "gift_flag")
	o.RefundNo = field.NewString(table, "refund_no")
	o.RefundStatus = field.NewInt32(table, "refund_status")
	o.RefundStatusName = field.NewString(table, "refund_status_name")
	o.RefundStatusAction = field.NewString(table, "refund_status_action")
	o.RefundType = field.NewInt32(table, "refund_type")
	o.RefundApplyMoney = field.NewFloat64(table, "refund_apply_money")
	o.RefundReason = field.NewString(table, "refund_reason")
	o.RefundRealMoney = field.NewFloat64(table, "refund_real_money")
	o.RefundDeliveryName = field.NewString(table, "refund_delivery_name")
	o.RefundDeliveryNo = field.NewString(table, "refund_delivery_no")
	o.RefundTime = field.NewInt32(table, "refund_time")
	o.RefundRefuseReason = field.NewString(table, "refund_refuse_reason")
	o.RefundActionTime = field.NewInt32(table, "refund_action_time")
	o.DeliveryStatusName = field.NewString(table, "delivery_status_name")
	o.RealGoodsMoney = field.NewFloat64(table, "real_goods_money")
	o.RefundRemark = field.NewString(table, "refund_remark")
	o.RefundDeliveryRemark = field.NewString(table, "refund_delivery_remark")
	o.RefundAddress = field.NewString(table, "refund_address")
	o.RefundExpressNum = field.NewString(table, "refund_express_num")
	o.IsRefundStock = field.NewInt32(table, "is_refund_stock")
	o.RefundMoneyType = field.NewInt32(table, "refund_money_type")
	o.ShopActiveRefund = field.NewBool(table, "shop_active_refund")
	o.ShopRefundRemark = field.NewString(table, "shop_refund_remark")
	o.RefundMode = field.NewInt32(table, "refund_mode")
	o.PromotionMoney = field.NewFloat64(table, "promotion_money")
	o.CouponMoney = field.NewFloat64(table, "coupon_money")
	o.AdjustMoney = field.NewFloat64(table, "adjust_money")
	o.GoodsName = field.NewString(table, "goods_name")
	o.SkuSpecFormat = field.NewString(table, "sku_spec_format")
	o.IsFenxiao = field.NewInt32(table, "is_fenxiao")
	o.UsePoint = field.NewInt32(table, "use_point")
	o.PointMoney = field.NewFloat64(table, "point_money")
	o.RefundDeliveryMoney = field.NewFloat64(table, "refund_delivery_money")
	o.CreateTime = field.NewUint(table, "create_time")
	o.IsGetFree = field.NewInt32(table, "is_get_free")
	o.GetfreeOrderGoodsPid = field.NewInt32(table, "getfree_order_goods_pid")
	o.DiscountGoodsID = field.NewInt32(table, "discount_goods_id")
	o.DiscountGoodsLimit = field.NewInt32(table, "discount_goods_limit")
	o.OriginalPrice = field.NewFloat64(table, "original_price")
	o.IsChineseMedicine = field.NewInt32(table, "is_chinese_medicine")
	o.DiscountMoney = field.NewFloat64(table, "discount_money")
	o.GoodsAttr = field.NewString(table, "goods_attr")
	o.IssueNum = field.NewInt32(table, "issue_num")
	o.SeckillID = field.NewInt32(table, "seckill_id")
	o.TaxRate = field.NewFloat64(table, "tax_rate")
	o.SalesmanMemberID = field.NewInt32(table, "salesman_member_id")
	o.OldOrderGoodsID = field.NewInt32(table, "old_order_goods_id")
	o.PromotionLabel = field.NewString(table, "promotion_label")
	o.RefundNum = field.NewInt32(table, "refund_num")

	o.fillFieldMap()

	return o
}

func (o *orderGoods) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderGoods) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 71)
	o.fieldMap["order_goods_id"] = o.OrderGoodsID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["order_no"] = o.OrderNo
	o.fieldMap["site_id"] = o.SiteID
	o.fieldMap["member_id"] = o.MemberID
	o.fieldMap["goods_id"] = o.GoodsID
	o.fieldMap["sku_id"] = o.SkuID
	o.fieldMap["sku_name"] = o.SkuName
	o.fieldMap["sku_image"] = o.SkuImage
	o.fieldMap["sku_no"] = o.SkuNo
	o.fieldMap["is_virtual"] = o.IsVirtual
	o.fieldMap["goods_class"] = o.GoodsClass
	o.fieldMap["goods_class_name"] = o.GoodsClassName
	o.fieldMap["price"] = o.Price
	o.fieldMap["cost_price"] = o.CostPrice
	o.fieldMap["num"] = o.Num
	o.fieldMap["goods_money"] = o.GoodsMoney
	o.fieldMap["cost_money"] = o.CostMoney
	o.fieldMap["delivery_status"] = o.DeliveryStatus
	o.fieldMap["delivery_no"] = o.DeliveryNo
	o.fieldMap["gift_flag"] = o.GiftFlag
	o.fieldMap["refund_no"] = o.RefundNo
	o.fieldMap["refund_status"] = o.RefundStatus
	o.fieldMap["refund_status_name"] = o.RefundStatusName
	o.fieldMap["refund_status_action"] = o.RefundStatusAction
	o.fieldMap["refund_type"] = o.RefundType
	o.fieldMap["refund_apply_money"] = o.RefundApplyMoney
	o.fieldMap["refund_reason"] = o.RefundReason
	o.fieldMap["refund_real_money"] = o.RefundRealMoney
	o.fieldMap["refund_delivery_name"] = o.RefundDeliveryName
	o.fieldMap["refund_delivery_no"] = o.RefundDeliveryNo
	o.fieldMap["refund_time"] = o.RefundTime
	o.fieldMap["refund_refuse_reason"] = o.RefundRefuseReason
	o.fieldMap["refund_action_time"] = o.RefundActionTime
	o.fieldMap["delivery_status_name"] = o.DeliveryStatusName
	o.fieldMap["real_goods_money"] = o.RealGoodsMoney
	o.fieldMap["refund_remark"] = o.RefundRemark
	o.fieldMap["refund_delivery_remark"] = o.RefundDeliveryRemark
	o.fieldMap["refund_address"] = o.RefundAddress
	o.fieldMap["refund_express_num"] = o.RefundExpressNum
	o.fieldMap["is_refund_stock"] = o.IsRefundStock
	o.fieldMap["refund_money_type"] = o.RefundMoneyType
	o.fieldMap["shop_active_refund"] = o.ShopActiveRefund
	o.fieldMap["shop_refund_remark"] = o.ShopRefundRemark
	o.fieldMap["refund_mode"] = o.RefundMode
	o.fieldMap["promotion_money"] = o.PromotionMoney
	o.fieldMap["coupon_money"] = o.CouponMoney
	o.fieldMap["adjust_money"] = o.AdjustMoney
	o.fieldMap["goods_name"] = o.GoodsName
	o.fieldMap["sku_spec_format"] = o.SkuSpecFormat
	o.fieldMap["is_fenxiao"] = o.IsFenxiao
	o.fieldMap["use_point"] = o.UsePoint
	o.fieldMap["point_money"] = o.PointMoney
	o.fieldMap["refund_delivery_money"] = o.RefundDeliveryMoney
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["is_get_free"] = o.IsGetFree
	o.fieldMap["getfree_order_goods_pid"] = o.GetfreeOrderGoodsPid
	o.fieldMap["discount_goods_id"] = o.DiscountGoodsID
	o.fieldMap["discount_goods_limit"] = o.DiscountGoodsLimit
	o.fieldMap["original_price"] = o.OriginalPrice
	o.fieldMap["is_chinese_medicine"] = o.IsChineseMedicine
	o.fieldMap["discount_money"] = o.DiscountMoney
	o.fieldMap["goods_attr"] = o.GoodsAttr
	o.fieldMap["issue_num"] = o.IssueNum
	o.fieldMap["seckill_id"] = o.SeckillID
	o.fieldMap["tax_rate"] = o.TaxRate
	o.fieldMap["salesman_member_id"] = o.SalesmanMemberID
	o.fieldMap["old_order_goods_id"] = o.OldOrderGoodsID
	o.fieldMap["promotion_label"] = o.PromotionLabel
	o.fieldMap["refund_num"] = o.RefundNum

}

func (o orderGoods) clone(db *gorm.DB) orderGoods {
	o.orderGoodsDo.ReplaceConnPool(db.Statement.ConnPool)
	o.Goods.db = db.Session(&gorm.Session{Initialized: true})
	o.Goods.db.Statement.ConnPool = db.Statement.ConnPool
	return o
}

func (o orderGoods) replaceDB(db *gorm.DB) orderGoods {
	o.orderGoodsDo.ReplaceDB(db)
	o.Goods.db = db.Session(&gorm.Session{})
	return o
}

type orderGoodsHasOneGoods struct {
	db *gorm.DB

	field.RelationField
}

func (a orderGoodsHasOneGoods) Where(conds ...field.Expr) *orderGoodsHasOneGoods {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a orderGoodsHasOneGoods) WithContext(ctx context.Context) *orderGoodsHasOneGoods {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a orderGoodsHasOneGoods) Session(session *gorm.Session) *orderGoodsHasOneGoods {
	a.db = a.db.Session(session)
	return &a
}

func (a orderGoodsHasOneGoods) Model(m *shop_model.OrderGoods) *orderGoodsHasOneGoodsTx {
	return &orderGoodsHasOneGoodsTx{a.db.Model(m).Association(a.Name())}
}

func (a orderGoodsHasOneGoods) Unscoped() *orderGoodsHasOneGoods {
	a.db = a.db.Unscoped()
	return &a
}

type orderGoodsHasOneGoodsTx struct{ tx *gorm.Association }

func (a orderGoodsHasOneGoodsTx) Find() (result *shop_model.Goods, err error) {
	return result, a.tx.Find(&result)
}

func (a orderGoodsHasOneGoodsTx) Append(values ...*shop_model.Goods) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a orderGoodsHasOneGoodsTx) Replace(values ...*shop_model.Goods) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a orderGoodsHasOneGoodsTx) Delete(values ...*shop_model.Goods) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a orderGoodsHasOneGoodsTx) Clear() error {
	return a.tx.Clear()
}

func (a orderGoodsHasOneGoodsTx) Count() int64 {
	return a.tx.Count()
}

func (a orderGoodsHasOneGoodsTx) Unscoped() *orderGoodsHasOneGoodsTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type orderGoodsDo struct{ gen.DO }

type IOrderGoodsDo interface {
	gen.SubQuery
	Debug() IOrderGoodsDo
	WithContext(ctx context.Context) IOrderGoodsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderGoodsDo
	WriteDB() IOrderGoodsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderGoodsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderGoodsDo
	Not(conds ...gen.Condition) IOrderGoodsDo
	Or(conds ...gen.Condition) IOrderGoodsDo
	Select(conds ...field.Expr) IOrderGoodsDo
	Where(conds ...gen.Condition) IOrderGoodsDo
	Order(conds ...field.Expr) IOrderGoodsDo
	Distinct(cols ...field.Expr) IOrderGoodsDo
	Omit(cols ...field.Expr) IOrderGoodsDo
	Join(table schema.Tabler, on ...field.Expr) IOrderGoodsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderGoodsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderGoodsDo
	Group(cols ...field.Expr) IOrderGoodsDo
	Having(conds ...gen.Condition) IOrderGoodsDo
	Limit(limit int) IOrderGoodsDo
	Offset(offset int) IOrderGoodsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderGoodsDo
	Unscoped() IOrderGoodsDo
	Create(values ...*shop_model.OrderGoods) error
	CreateInBatches(values []*shop_model.OrderGoods, batchSize int) error
	Save(values ...*shop_model.OrderGoods) error
	First() (*shop_model.OrderGoods, error)
	Take() (*shop_model.OrderGoods, error)
	Last() (*shop_model.OrderGoods, error)
	Find() ([]*shop_model.OrderGoods, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*shop_model.OrderGoods, err error)
	FindInBatches(result *[]*shop_model.OrderGoods, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*shop_model.OrderGoods) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderGoodsDo
	Assign(attrs ...field.AssignExpr) IOrderGoodsDo
	Joins(fields ...field.RelationField) IOrderGoodsDo
	Preload(fields ...field.RelationField) IOrderGoodsDo
	FirstOrInit() (*shop_model.OrderGoods, error)
	FirstOrCreate() (*shop_model.OrderGoods, error)
	FindByPage(offset int, limit int) (result []*shop_model.OrderGoods, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderGoodsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderGoodsDo) Debug() IOrderGoodsDo {
	return o.withDO(o.DO.Debug())
}

func (o orderGoodsDo) WithContext(ctx context.Context) IOrderGoodsDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderGoodsDo) ReadDB() IOrderGoodsDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderGoodsDo) WriteDB() IOrderGoodsDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderGoodsDo) Session(config *gorm.Session) IOrderGoodsDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderGoodsDo) Clauses(conds ...clause.Expression) IOrderGoodsDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderGoodsDo) Returning(value interface{}, columns ...string) IOrderGoodsDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderGoodsDo) Not(conds ...gen.Condition) IOrderGoodsDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderGoodsDo) Or(conds ...gen.Condition) IOrderGoodsDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderGoodsDo) Select(conds ...field.Expr) IOrderGoodsDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderGoodsDo) Where(conds ...gen.Condition) IOrderGoodsDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderGoodsDo) Order(conds ...field.Expr) IOrderGoodsDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderGoodsDo) Distinct(cols ...field.Expr) IOrderGoodsDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderGoodsDo) Omit(cols ...field.Expr) IOrderGoodsDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderGoodsDo) Join(table schema.Tabler, on ...field.Expr) IOrderGoodsDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderGoodsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderGoodsDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderGoodsDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderGoodsDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderGoodsDo) Group(cols ...field.Expr) IOrderGoodsDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderGoodsDo) Having(conds ...gen.Condition) IOrderGoodsDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderGoodsDo) Limit(limit int) IOrderGoodsDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderGoodsDo) Offset(offset int) IOrderGoodsDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderGoodsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderGoodsDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderGoodsDo) Unscoped() IOrderGoodsDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderGoodsDo) Create(values ...*shop_model.OrderGoods) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderGoodsDo) CreateInBatches(values []*shop_model.OrderGoods, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderGoodsDo) Save(values ...*shop_model.OrderGoods) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderGoodsDo) First() (*shop_model.OrderGoods, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.OrderGoods), nil
	}
}

func (o orderGoodsDo) Take() (*shop_model.OrderGoods, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.OrderGoods), nil
	}
}

func (o orderGoodsDo) Last() (*shop_model.OrderGoods, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.OrderGoods), nil
	}
}

func (o orderGoodsDo) Find() ([]*shop_model.OrderGoods, error) {
	result, err := o.DO.Find()
	return result.([]*shop_model.OrderGoods), err
}

func (o orderGoodsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*shop_model.OrderGoods, err error) {
	buf := make([]*shop_model.OrderGoods, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderGoodsDo) FindInBatches(result *[]*shop_model.OrderGoods, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderGoodsDo) Attrs(attrs ...field.AssignExpr) IOrderGoodsDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderGoodsDo) Assign(attrs ...field.AssignExpr) IOrderGoodsDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderGoodsDo) Joins(fields ...field.RelationField) IOrderGoodsDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderGoodsDo) Preload(fields ...field.RelationField) IOrderGoodsDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderGoodsDo) FirstOrInit() (*shop_model.OrderGoods, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.OrderGoods), nil
	}
}

func (o orderGoodsDo) FirstOrCreate() (*shop_model.OrderGoods, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.OrderGoods), nil
	}
}

func (o orderGoodsDo) FindByPage(offset int, limit int) (result []*shop_model.OrderGoods, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderGoodsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderGoodsDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderGoodsDo) Delete(models ...*shop_model.OrderGoods) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderGoodsDo) withDO(do gen.Dao) *orderGoodsDo {
	o.DO = *do.(*gen.DO)
	return o
}
