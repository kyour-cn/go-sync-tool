// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package shop_query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"app/internal/orm/shop_model"
)

func newGoodsSku(db *gorm.DB, opts ...gen.DOOption) goodsSku {
	_goodsSku := goodsSku{}

	_goodsSku.goodsSkuDo.UseDB(db, opts...)
	_goodsSku.goodsSkuDo.UseModel(&shop_model.GoodsSku{})

	tableName := _goodsSku.goodsSkuDo.TableName()
	_goodsSku.ALL = field.NewAsterisk(tableName)
	_goodsSku.SkuID = field.NewInt32(tableName, "sku_id")
	_goodsSku.SiteID = field.NewInt32(tableName, "site_id")
	_goodsSku.GoodsID = field.NewInt32(tableName, "goods_id")
	_goodsSku.SkuName = field.NewString(tableName, "sku_name")
	_goodsSku.SkuNo = field.NewString(tableName, "sku_no")
	_goodsSku.SkuSpecFormat = field.NewString(tableName, "sku_spec_format")
	_goodsSku.Price = field.NewFloat64(tableName, "price")
	_goodsSku.MarketPrice = field.NewFloat64(tableName, "market_price")
	_goodsSku.CostPrice = field.NewFloat64(tableName, "cost_price")
	_goodsSku.DiscountPrice = field.NewFloat64(tableName, "discount_price")
	_goodsSku.PromotionType = field.NewInt32(tableName, "promotion_type")
	_goodsSku.StartTime = field.NewInt32(tableName, "start_time")
	_goodsSku.EndTime = field.NewInt32(tableName, "end_time")
	_goodsSku.Stock = field.NewInt32(tableName, "stock")
	_goodsSku.Weight = field.NewFloat64(tableName, "weight")
	_goodsSku.Volume = field.NewFloat64(tableName, "volume")
	_goodsSku.ClickNum = field.NewInt32(tableName, "click_num")
	_goodsSku.SaleNum = field.NewInt32(tableName, "sale_num")
	_goodsSku.CollectNum = field.NewInt32(tableName, "collect_num")
	_goodsSku.SkuImage = field.NewString(tableName, "sku_image")
	_goodsSku.SkuImages = field.NewString(tableName, "sku_images")
	_goodsSku.GoodsClass = field.NewInt32(tableName, "goods_class")
	_goodsSku.GoodsClassName = field.NewString(tableName, "goods_class_name")
	_goodsSku.GoodsAttrClass = field.NewInt32(tableName, "goods_attr_class")
	_goodsSku.GoodsAttrName = field.NewString(tableName, "goods_attr_name")
	_goodsSku.GoodsName = field.NewString(tableName, "goods_name")
	_goodsSku.GoodsContent = field.NewString(tableName, "goods_content")
	_goodsSku.GoodsState = field.NewInt32(tableName, "goods_state")
	_goodsSku.GoodsStockAlarm = field.NewInt32(tableName, "goods_stock_alarm")
	_goodsSku.IsVirtual = field.NewInt32(tableName, "is_virtual")
	_goodsSku.VirtualIndate = field.NewInt32(tableName, "virtual_indate")
	_goodsSku.IsFreeShipping = field.NewInt32(tableName, "is_free_shipping")
	_goodsSku.ShippingTemplate = field.NewInt32(tableName, "shipping_template")
	_goodsSku.GoodsSpecFormat = field.NewString(tableName, "goods_spec_format")
	_goodsSku.GoodsAttrFormat = field.NewString(tableName, "goods_attr_format")
	_goodsSku.IsDelete = field.NewInt32(tableName, "is_delete")
	_goodsSku.Introduction = field.NewString(tableName, "introduction")
	_goodsSku.Keywords = field.NewString(tableName, "keywords")
	_goodsSku.Unit = field.NewString(tableName, "unit")
	_goodsSku.Sort = field.NewInt32(tableName, "sort")
	_goodsSku.CreateTime = field.NewUint(tableName, "create_time")
	_goodsSku.ModifyTime = field.NewInt32(tableName, "modify_time")
	_goodsSku.VideoURL = field.NewString(tableName, "video_url")
	_goodsSku.Evaluate = field.NewInt32(tableName, "evaluate")
	_goodsSku.EvaluateShaitu = field.NewInt32(tableName, "evaluate_shaitu")
	_goodsSku.EvaluateShipin = field.NewInt32(tableName, "evaluate_shipin")
	_goodsSku.EvaluateZhuiping = field.NewInt32(tableName, "evaluate_zhuiping")
	_goodsSku.EvaluateHaoping = field.NewInt32(tableName, "evaluate_haoping")
	_goodsSku.EvaluateZhongping = field.NewInt32(tableName, "evaluate_zhongping")
	_goodsSku.EvaluateChaping = field.NewInt32(tableName, "evaluate_chaping")
	_goodsSku.SpecName = field.NewString(tableName, "spec_name")
	_goodsSku.SupplierID = field.NewInt32(tableName, "supplier_id")
	_goodsSku.IsConsumeDiscount = field.NewBool(tableName, "is_consume_discount")
	_goodsSku.DiscountConfig = field.NewBool(tableName, "discount_config")
	_goodsSku.DiscountMethod = field.NewString(tableName, "discount_method")
	_goodsSku.MemberPrice = field.NewString(tableName, "member_price")
	_goodsSku.GoodsServiceIds = field.NewString(tableName, "goods_service_ids")
	_goodsSku.VirtualSale = field.NewInt32(tableName, "virtual_sale")
	_goodsSku.MaxBuy = field.NewInt32(tableName, "max_buy")
	_goodsSku.MinBuy = field.NewInt32(tableName, "min_buy")
	_goodsSku.RecommendWay = field.NewInt32(tableName, "recommend_way")
	_goodsSku.FenxiaoPrice = field.NewFloat64(tableName, "fenxiao_price")
	_goodsSku.StockAlarm = field.NewInt32(tableName, "stock_alarm")
	_goodsSku.SaleSort = field.NewInt32(tableName, "sale_sort")
	_goodsSku.IsDefault = field.NewBool(tableName, "is_default")
	_goodsSku.VerifyNum = field.NewInt32(tableName, "verify_num")
	_goodsSku.IsLimit = field.NewInt32(tableName, "is_limit")
	_goodsSku.LimitType = field.NewInt32(tableName, "limit_type")
	_goodsSku.QrID = field.NewInt32(tableName, "qr_id")
	_goodsSku.TemplateID = field.NewInt32(tableName, "template_id")
	_goodsSku.SuccessEvaluateNum = field.NewInt32(tableName, "success_evaluate_num")
	_goodsSku.FailEvaluateNum = field.NewInt32(tableName, "fail_evaluate_num")
	_goodsSku.WaitEvaluateNum = field.NewInt32(tableName, "wait_evaluate_num")
	_goodsSku.GoodsArea = field.NewString(tableName, "goods_area")
	_goodsSku.IsPresale = field.NewInt32(tableName, "is_presale")
	_goodsSku.TaxRate = field.NewFloat64(tableName, "tax_rate")
	_goodsSku.LiveGoodsID = field.NewInt32(tableName, "live_goods_id")

	_goodsSku.fillFieldMap()

	return _goodsSku
}

// goodsSku 商品表
type goodsSku struct {
	goodsSkuDo

	ALL                field.Asterisk
	SkuID              field.Int32   // 商品sku_id
	SiteID             field.Int32   // 所属店铺id
	GoodsID            field.Int32   // 商品id
	SkuName            field.String  // 商品sku名称
	SkuNo              field.String  // 商品sku编码
	SkuSpecFormat      field.String  // sku规格格式
	Price              field.Float64 // sku单价
	MarketPrice        field.Float64 // sku划线价
	CostPrice          field.Float64 // sku成本价
	DiscountPrice      field.Float64 // sku折扣价（默认等于单价）
	PromotionType      field.Int32   // 活动类型1.限时折扣
	StartTime          field.Int32   // 活动开始时间
	EndTime            field.Int32   // 活动结束时间
	Stock              field.Int32   // 商品sku库存
	Weight             field.Float64 // 重量（单位g）
	Volume             field.Float64 // 体积（单位立方米）
	ClickNum           field.Int32   // 点击量
	SaleNum            field.Int32   // 销量
	CollectNum         field.Int32   // 收藏量
	SkuImage           field.String  // sku主图
	SkuImages          field.String  // sku图片
	GoodsClass         field.Int32   // 商品种类1.实物商品2.虚拟商品3.卡券商品
	GoodsClassName     field.String  // 商品种类
	GoodsAttrClass     field.Int32   // 商品类型id
	GoodsAttrName      field.String  // 商品类型名称
	GoodsName          field.String  // 商品名称
	GoodsContent       field.String  // 商品详情
	GoodsState         field.Int32   // 商品状态（1.正常0下架）
	GoodsStockAlarm    field.Int32   // 库存预警
	IsVirtual          field.Int32   // 是否虚拟类商品（0实物1.虚拟）
	VirtualIndate      field.Int32   // 虚拟商品有效期
	IsFreeShipping     field.Int32   // 是否免邮
	ShippingTemplate   field.Int32   // 指定运费模板
	GoodsSpecFormat    field.String  // 商品规格格式
	GoodsAttrFormat    field.String  // 商品属性格式
	IsDelete           field.Int32   // 是否已经删除
	Introduction       field.String  // 促销语
	Keywords           field.String  // 关键词
	Unit               field.String  // 单位
	Sort               field.Int32   // 排序
	CreateTime         field.Uint    // 创建时间
	ModifyTime         field.Int32   // 修改时间
	VideoURL           field.String  // 视频
	Evaluate           field.Int32   // 评价数
	EvaluateShaitu     field.Int32   // 晒图评价数
	EvaluateShipin     field.Int32   // 视频评价数
	EvaluateZhuiping   field.Int32   // 追评数
	EvaluateHaoping    field.Int32   // 好评数
	EvaluateZhongping  field.Int32   // 中评数
	EvaluateChaping    field.Int32   // 差评数
	SpecName           field.String  // 规格名称
	SupplierID         field.Int32   // 供应商id
	IsConsumeDiscount  field.Bool    // 是否参与会员等级折扣
	DiscountConfig     field.Bool    // 优惠设置（0默认 1自定义）
	DiscountMethod     field.String  // 优惠方式（discount打折 manjian 满减 fixed_price 指定价格）
	MemberPrice        field.String  // 会员价
	GoodsServiceIds    field.String  // 商品服务id
	VirtualSale        field.Int32   // 虚拟销量
	MaxBuy             field.Int32   // 限购
	MinBuy             field.Int32
	RecommendWay       field.Int32   // 推荐方式，1：新品，2：精品，3；推荐
	FenxiaoPrice       field.Float64 // 分销计算价格
	StockAlarm         field.Int32   // sku库存预警
	SaleSort           field.Int32   // 销量排序字段 占位用
	IsDefault          field.Bool    // 是否默认
	VerifyNum          field.Int32   // 核销次数
	IsLimit            field.Int32   // 是否限购(0否1是)
	LimitType          field.Int32   // 限购类型(1单次限购2长期限购)
	QrID               field.Int32   // 社群二维码id
	TemplateID         field.Int32   // 海报id
	SuccessEvaluateNum field.Int32   // 评价审核通过数
	FailEvaluateNum    field.Int32   // 评价审核失败数
	WaitEvaluateNum    field.Int32   // 评价待审核数
	GoodsArea          field.String  // 商品库区
	IsPresale          field.Int32   // 是否预售
	TaxRate            field.Float64 // 税率 单位:百分比
	LiveGoodsID        field.Int32   // 是否同步到直播

	fieldMap map[string]field.Expr
}

func (g goodsSku) Table(newTableName string) *goodsSku {
	g.goodsSkuDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goodsSku) As(alias string) *goodsSku {
	g.goodsSkuDo.DO = *(g.goodsSkuDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goodsSku) updateTableName(table string) *goodsSku {
	g.ALL = field.NewAsterisk(table)
	g.SkuID = field.NewInt32(table, "sku_id")
	g.SiteID = field.NewInt32(table, "site_id")
	g.GoodsID = field.NewInt32(table, "goods_id")
	g.SkuName = field.NewString(table, "sku_name")
	g.SkuNo = field.NewString(table, "sku_no")
	g.SkuSpecFormat = field.NewString(table, "sku_spec_format")
	g.Price = field.NewFloat64(table, "price")
	g.MarketPrice = field.NewFloat64(table, "market_price")
	g.CostPrice = field.NewFloat64(table, "cost_price")
	g.DiscountPrice = field.NewFloat64(table, "discount_price")
	g.PromotionType = field.NewInt32(table, "promotion_type")
	g.StartTime = field.NewInt32(table, "start_time")
	g.EndTime = field.NewInt32(table, "end_time")
	g.Stock = field.NewInt32(table, "stock")
	g.Weight = field.NewFloat64(table, "weight")
	g.Volume = field.NewFloat64(table, "volume")
	g.ClickNum = field.NewInt32(table, "click_num")
	g.SaleNum = field.NewInt32(table, "sale_num")
	g.CollectNum = field.NewInt32(table, "collect_num")
	g.SkuImage = field.NewString(table, "sku_image")
	g.SkuImages = field.NewString(table, "sku_images")
	g.GoodsClass = field.NewInt32(table, "goods_class")
	g.GoodsClassName = field.NewString(table, "goods_class_name")
	g.GoodsAttrClass = field.NewInt32(table, "goods_attr_class")
	g.GoodsAttrName = field.NewString(table, "goods_attr_name")
	g.GoodsName = field.NewString(table, "goods_name")
	g.GoodsContent = field.NewString(table, "goods_content")
	g.GoodsState = field.NewInt32(table, "goods_state")
	g.GoodsStockAlarm = field.NewInt32(table, "goods_stock_alarm")
	g.IsVirtual = field.NewInt32(table, "is_virtual")
	g.VirtualIndate = field.NewInt32(table, "virtual_indate")
	g.IsFreeShipping = field.NewInt32(table, "is_free_shipping")
	g.ShippingTemplate = field.NewInt32(table, "shipping_template")
	g.GoodsSpecFormat = field.NewString(table, "goods_spec_format")
	g.GoodsAttrFormat = field.NewString(table, "goods_attr_format")
	g.IsDelete = field.NewInt32(table, "is_delete")
	g.Introduction = field.NewString(table, "introduction")
	g.Keywords = field.NewString(table, "keywords")
	g.Unit = field.NewString(table, "unit")
	g.Sort = field.NewInt32(table, "sort")
	g.CreateTime = field.NewUint(table, "create_time")
	g.ModifyTime = field.NewInt32(table, "modify_time")
	g.VideoURL = field.NewString(table, "video_url")
	g.Evaluate = field.NewInt32(table, "evaluate")
	g.EvaluateShaitu = field.NewInt32(table, "evaluate_shaitu")
	g.EvaluateShipin = field.NewInt32(table, "evaluate_shipin")
	g.EvaluateZhuiping = field.NewInt32(table, "evaluate_zhuiping")
	g.EvaluateHaoping = field.NewInt32(table, "evaluate_haoping")
	g.EvaluateZhongping = field.NewInt32(table, "evaluate_zhongping")
	g.EvaluateChaping = field.NewInt32(table, "evaluate_chaping")
	g.SpecName = field.NewString(table, "spec_name")
	g.SupplierID = field.NewInt32(table, "supplier_id")
	g.IsConsumeDiscount = field.NewBool(table, "is_consume_discount")
	g.DiscountConfig = field.NewBool(table, "discount_config")
	g.DiscountMethod = field.NewString(table, "discount_method")
	g.MemberPrice = field.NewString(table, "member_price")
	g.GoodsServiceIds = field.NewString(table, "goods_service_ids")
	g.VirtualSale = field.NewInt32(table, "virtual_sale")
	g.MaxBuy = field.NewInt32(table, "max_buy")
	g.MinBuy = field.NewInt32(table, "min_buy")
	g.RecommendWay = field.NewInt32(table, "recommend_way")
	g.FenxiaoPrice = field.NewFloat64(table, "fenxiao_price")
	g.StockAlarm = field.NewInt32(table, "stock_alarm")
	g.SaleSort = field.NewInt32(table, "sale_sort")
	g.IsDefault = field.NewBool(table, "is_default")
	g.VerifyNum = field.NewInt32(table, "verify_num")
	g.IsLimit = field.NewInt32(table, "is_limit")
	g.LimitType = field.NewInt32(table, "limit_type")
	g.QrID = field.NewInt32(table, "qr_id")
	g.TemplateID = field.NewInt32(table, "template_id")
	g.SuccessEvaluateNum = field.NewInt32(table, "success_evaluate_num")
	g.FailEvaluateNum = field.NewInt32(table, "fail_evaluate_num")
	g.WaitEvaluateNum = field.NewInt32(table, "wait_evaluate_num")
	g.GoodsArea = field.NewString(table, "goods_area")
	g.IsPresale = field.NewInt32(table, "is_presale")
	g.TaxRate = field.NewFloat64(table, "tax_rate")
	g.LiveGoodsID = field.NewInt32(table, "live_goods_id")

	g.fillFieldMap()

	return g
}

func (g *goodsSku) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goodsSku) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 77)
	g.fieldMap["sku_id"] = g.SkuID
	g.fieldMap["site_id"] = g.SiteID
	g.fieldMap["goods_id"] = g.GoodsID
	g.fieldMap["sku_name"] = g.SkuName
	g.fieldMap["sku_no"] = g.SkuNo
	g.fieldMap["sku_spec_format"] = g.SkuSpecFormat
	g.fieldMap["price"] = g.Price
	g.fieldMap["market_price"] = g.MarketPrice
	g.fieldMap["cost_price"] = g.CostPrice
	g.fieldMap["discount_price"] = g.DiscountPrice
	g.fieldMap["promotion_type"] = g.PromotionType
	g.fieldMap["start_time"] = g.StartTime
	g.fieldMap["end_time"] = g.EndTime
	g.fieldMap["stock"] = g.Stock
	g.fieldMap["weight"] = g.Weight
	g.fieldMap["volume"] = g.Volume
	g.fieldMap["click_num"] = g.ClickNum
	g.fieldMap["sale_num"] = g.SaleNum
	g.fieldMap["collect_num"] = g.CollectNum
	g.fieldMap["sku_image"] = g.SkuImage
	g.fieldMap["sku_images"] = g.SkuImages
	g.fieldMap["goods_class"] = g.GoodsClass
	g.fieldMap["goods_class_name"] = g.GoodsClassName
	g.fieldMap["goods_attr_class"] = g.GoodsAttrClass
	g.fieldMap["goods_attr_name"] = g.GoodsAttrName
	g.fieldMap["goods_name"] = g.GoodsName
	g.fieldMap["goods_content"] = g.GoodsContent
	g.fieldMap["goods_state"] = g.GoodsState
	g.fieldMap["goods_stock_alarm"] = g.GoodsStockAlarm
	g.fieldMap["is_virtual"] = g.IsVirtual
	g.fieldMap["virtual_indate"] = g.VirtualIndate
	g.fieldMap["is_free_shipping"] = g.IsFreeShipping
	g.fieldMap["shipping_template"] = g.ShippingTemplate
	g.fieldMap["goods_spec_format"] = g.GoodsSpecFormat
	g.fieldMap["goods_attr_format"] = g.GoodsAttrFormat
	g.fieldMap["is_delete"] = g.IsDelete
	g.fieldMap["introduction"] = g.Introduction
	g.fieldMap["keywords"] = g.Keywords
	g.fieldMap["unit"] = g.Unit
	g.fieldMap["sort"] = g.Sort
	g.fieldMap["create_time"] = g.CreateTime
	g.fieldMap["modify_time"] = g.ModifyTime
	g.fieldMap["video_url"] = g.VideoURL
	g.fieldMap["evaluate"] = g.Evaluate
	g.fieldMap["evaluate_shaitu"] = g.EvaluateShaitu
	g.fieldMap["evaluate_shipin"] = g.EvaluateShipin
	g.fieldMap["evaluate_zhuiping"] = g.EvaluateZhuiping
	g.fieldMap["evaluate_haoping"] = g.EvaluateHaoping
	g.fieldMap["evaluate_zhongping"] = g.EvaluateZhongping
	g.fieldMap["evaluate_chaping"] = g.EvaluateChaping
	g.fieldMap["spec_name"] = g.SpecName
	g.fieldMap["supplier_id"] = g.SupplierID
	g.fieldMap["is_consume_discount"] = g.IsConsumeDiscount
	g.fieldMap["discount_config"] = g.DiscountConfig
	g.fieldMap["discount_method"] = g.DiscountMethod
	g.fieldMap["member_price"] = g.MemberPrice
	g.fieldMap["goods_service_ids"] = g.GoodsServiceIds
	g.fieldMap["virtual_sale"] = g.VirtualSale
	g.fieldMap["max_buy"] = g.MaxBuy
	g.fieldMap["min_buy"] = g.MinBuy
	g.fieldMap["recommend_way"] = g.RecommendWay
	g.fieldMap["fenxiao_price"] = g.FenxiaoPrice
	g.fieldMap["stock_alarm"] = g.StockAlarm
	g.fieldMap["sale_sort"] = g.SaleSort
	g.fieldMap["is_default"] = g.IsDefault
	g.fieldMap["verify_num"] = g.VerifyNum
	g.fieldMap["is_limit"] = g.IsLimit
	g.fieldMap["limit_type"] = g.LimitType
	g.fieldMap["qr_id"] = g.QrID
	g.fieldMap["template_id"] = g.TemplateID
	g.fieldMap["success_evaluate_num"] = g.SuccessEvaluateNum
	g.fieldMap["fail_evaluate_num"] = g.FailEvaluateNum
	g.fieldMap["wait_evaluate_num"] = g.WaitEvaluateNum
	g.fieldMap["goods_area"] = g.GoodsArea
	g.fieldMap["is_presale"] = g.IsPresale
	g.fieldMap["tax_rate"] = g.TaxRate
	g.fieldMap["live_goods_id"] = g.LiveGoodsID
}

func (g goodsSku) clone(db *gorm.DB) goodsSku {
	g.goodsSkuDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g goodsSku) replaceDB(db *gorm.DB) goodsSku {
	g.goodsSkuDo.ReplaceDB(db)
	return g
}

type goodsSkuDo struct{ gen.DO }

type IGoodsSkuDo interface {
	gen.SubQuery
	Debug() IGoodsSkuDo
	WithContext(ctx context.Context) IGoodsSkuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGoodsSkuDo
	WriteDB() IGoodsSkuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGoodsSkuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGoodsSkuDo
	Not(conds ...gen.Condition) IGoodsSkuDo
	Or(conds ...gen.Condition) IGoodsSkuDo
	Select(conds ...field.Expr) IGoodsSkuDo
	Where(conds ...gen.Condition) IGoodsSkuDo
	Order(conds ...field.Expr) IGoodsSkuDo
	Distinct(cols ...field.Expr) IGoodsSkuDo
	Omit(cols ...field.Expr) IGoodsSkuDo
	Join(table schema.Tabler, on ...field.Expr) IGoodsSkuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGoodsSkuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGoodsSkuDo
	Group(cols ...field.Expr) IGoodsSkuDo
	Having(conds ...gen.Condition) IGoodsSkuDo
	Limit(limit int) IGoodsSkuDo
	Offset(offset int) IGoodsSkuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGoodsSkuDo
	Unscoped() IGoodsSkuDo
	Create(values ...*shop_model.GoodsSku) error
	CreateInBatches(values []*shop_model.GoodsSku, batchSize int) error
	Save(values ...*shop_model.GoodsSku) error
	First() (*shop_model.GoodsSku, error)
	Take() (*shop_model.GoodsSku, error)
	Last() (*shop_model.GoodsSku, error)
	Find() ([]*shop_model.GoodsSku, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*shop_model.GoodsSku, err error)
	FindInBatches(result *[]*shop_model.GoodsSku, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*shop_model.GoodsSku) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGoodsSkuDo
	Assign(attrs ...field.AssignExpr) IGoodsSkuDo
	Joins(fields ...field.RelationField) IGoodsSkuDo
	Preload(fields ...field.RelationField) IGoodsSkuDo
	FirstOrInit() (*shop_model.GoodsSku, error)
	FirstOrCreate() (*shop_model.GoodsSku, error)
	FindByPage(offset int, limit int) (result []*shop_model.GoodsSku, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGoodsSkuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g goodsSkuDo) Debug() IGoodsSkuDo {
	return g.withDO(g.DO.Debug())
}

func (g goodsSkuDo) WithContext(ctx context.Context) IGoodsSkuDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goodsSkuDo) ReadDB() IGoodsSkuDo {
	return g.Clauses(dbresolver.Read)
}

func (g goodsSkuDo) WriteDB() IGoodsSkuDo {
	return g.Clauses(dbresolver.Write)
}

func (g goodsSkuDo) Session(config *gorm.Session) IGoodsSkuDo {
	return g.withDO(g.DO.Session(config))
}

func (g goodsSkuDo) Clauses(conds ...clause.Expression) IGoodsSkuDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goodsSkuDo) Returning(value interface{}, columns ...string) IGoodsSkuDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goodsSkuDo) Not(conds ...gen.Condition) IGoodsSkuDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goodsSkuDo) Or(conds ...gen.Condition) IGoodsSkuDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goodsSkuDo) Select(conds ...field.Expr) IGoodsSkuDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goodsSkuDo) Where(conds ...gen.Condition) IGoodsSkuDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goodsSkuDo) Order(conds ...field.Expr) IGoodsSkuDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goodsSkuDo) Distinct(cols ...field.Expr) IGoodsSkuDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goodsSkuDo) Omit(cols ...field.Expr) IGoodsSkuDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goodsSkuDo) Join(table schema.Tabler, on ...field.Expr) IGoodsSkuDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goodsSkuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGoodsSkuDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goodsSkuDo) RightJoin(table schema.Tabler, on ...field.Expr) IGoodsSkuDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goodsSkuDo) Group(cols ...field.Expr) IGoodsSkuDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goodsSkuDo) Having(conds ...gen.Condition) IGoodsSkuDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goodsSkuDo) Limit(limit int) IGoodsSkuDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goodsSkuDo) Offset(offset int) IGoodsSkuDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goodsSkuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGoodsSkuDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goodsSkuDo) Unscoped() IGoodsSkuDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goodsSkuDo) Create(values ...*shop_model.GoodsSku) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goodsSkuDo) CreateInBatches(values []*shop_model.GoodsSku, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goodsSkuDo) Save(values ...*shop_model.GoodsSku) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goodsSkuDo) First() (*shop_model.GoodsSku, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.GoodsSku), nil
	}
}

func (g goodsSkuDo) Take() (*shop_model.GoodsSku, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.GoodsSku), nil
	}
}

func (g goodsSkuDo) Last() (*shop_model.GoodsSku, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.GoodsSku), nil
	}
}

func (g goodsSkuDo) Find() ([]*shop_model.GoodsSku, error) {
	result, err := g.DO.Find()
	return result.([]*shop_model.GoodsSku), err
}

func (g goodsSkuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*shop_model.GoodsSku, err error) {
	buf := make([]*shop_model.GoodsSku, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goodsSkuDo) FindInBatches(result *[]*shop_model.GoodsSku, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goodsSkuDo) Attrs(attrs ...field.AssignExpr) IGoodsSkuDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goodsSkuDo) Assign(attrs ...field.AssignExpr) IGoodsSkuDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goodsSkuDo) Joins(fields ...field.RelationField) IGoodsSkuDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goodsSkuDo) Preload(fields ...field.RelationField) IGoodsSkuDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goodsSkuDo) FirstOrInit() (*shop_model.GoodsSku, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.GoodsSku), nil
	}
}

func (g goodsSkuDo) FirstOrCreate() (*shop_model.GoodsSku, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*shop_model.GoodsSku), nil
	}
}

func (g goodsSkuDo) FindByPage(offset int, limit int) (result []*shop_model.GoodsSku, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goodsSkuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goodsSkuDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goodsSkuDo) Delete(models ...*shop_model.GoodsSku) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goodsSkuDo) withDO(do gen.Dao) *goodsSkuDo {
	g.DO = *do.(*gen.DO)
	return g
}
